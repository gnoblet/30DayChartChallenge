[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "30DayChartChallenge",
    "section": "",
    "text": "Comparisons\n  \n    \n    \n      \n      01\n      Fractions\n    \n    \n    \n    \n      \n      02\n      Slope\n    \n    \n    \n    \n      \n      03\n      Circular\n    \n    \n    \n    \n      04\n      Big or Small\n    \n    \n    \n    \n      05\n      Ranking\n    \n    \n    \n    \n      06\n      F. Nightingale\n    \n  \n\n\n\n\n  Distributions\n  \n    \n    \n      \n      07\n      Outliers\n    \n    \n    \n    \n      \n      08\n      Histogram\n    \n    \n    \n    \n      \n      09\n      Diverging\n    \n    \n    \n    \n      10\n      Multi-modal\n    \n    \n    \n    \n      \n      11\n      Stripes\n    \n    \n    \n    \n      12\n      Data.gov\n    \n  \n\n\n\n\n  Relationships\n  \n    \n    \n      13\n      Clusters\n    \n    \n    \n    \n      14\n      Kinship\n    \n    \n    \n    \n      15\n      Complicated\n    \n    \n    \n    \n      \n      16\n      Negative\n    \n    \n    \n    \n      \n      17\n      Birds\n    \n    \n    \n    \n      18\n      El País\n    \n  \n\n\n\n\n  Timeseries\n  \n    \n    \n      \n      19\n      Smooth\n    \n    \n    \n    \n      \n      20\n      Urbanization\n    \n    \n    \n    \n      \n      21\n      Fossils\n    \n    \n    \n    \n      22\n      Stars\n    \n    \n    \n    \n      23\n      Log Scale\n    \n    \n    \n    \n      24\n      WHO\n    \n  \n\n\n\n\n  Uncertainties\n  \n    \n    \n      25\n      Risk\n    \n    \n    \n    \n      26\n      Monochrome\n    \n    \n    \n    \n      27\n      Noise\n    \n    \n    \n    \n      28\n      Inclusion\n    \n    \n    \n    \n      29\n      Extraterrestrial\n    \n    \n    \n    \n      30\n      Nat Geo\n    \n  \n\n\n\n  Made with Quarto and GitHub Copilot\n  on a Framework Laptop 13 running Fedora KDE 42 and Zed"
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "30 Day Chart Challenge",
    "section": "",
    "text": "The #30DayChartChallenge is a data visualization challenge where participants create and share a chart each day in April based on a set of prompts. This website contains my submissions, the code used to create them, and some background information on each visualization."
  },
  {
    "objectID": "index.html#latest-visualizations",
    "href": "index.html#latest-visualizations",
    "title": "30 Day Chart Challenge",
    "section": "",
    "text": "Day 21\n\n\n\n\n\nDay 19\n\n\n\n\n\nDay 17"
  },
  {
    "objectID": "index.html#how-to-navigate",
    "href": "index.html#how-to-navigate",
    "title": "30 Day Chart Challenge",
    "section": "",
    "text": "Use the sidebar to browse through all the days of the challenge. Each page contains:\n\nThe code used to create the visualization\nThe final chart\nBackground information and data sources\n\nEnjoy exploring the visualizations!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "&lt;h2&gt;About the 30 Day Chart Challenge&lt;/h2&gt;\n&lt;p&gt;The #30DayChartChallenge is a community-driven data visualization challenge that runs every April. Participants create one chart per day based on a set of prompts organized into different categories.&lt;/p&gt;\n\n\n&lt;h2&gt;The Challenge&lt;/h2&gt;\n&lt;p&gt;Each day has a specific prompt that guides the creation of a visualization. The prompts are organized into categories such as \"comparisons,\" \"distributions,\" \"relationships,\" and more. This structure encourages participants to explore different types of data visualization and improve their skills across various domains.&lt;/p&gt;\n\n\n&lt;h2&gt;My Approach&lt;/h2&gt;\n&lt;p&gt;For this challenge, I primarily used:&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li&gt;&lt;strong&gt;R&lt;/strong&gt; with packages like ggplot2, patchwork, and sf for most visualizations&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt; with libraries like matplotlib, seaborn, and plotly for specific days&lt;/li&gt;\n  &lt;li&gt;Various data sources including open data repositories, APIs, and self-collected data&lt;/li&gt;\n&lt;/ul&gt;\n\n\n&lt;h2&gt;Tools Used&lt;/h2&gt;\n&lt;div class=\"tools-grid\"&gt;\n  &lt;div class=\"tools-column\"&gt;\n    &lt;h3&gt;R Packages&lt;/h3&gt;\n    &lt;ul&gt;\n      &lt;li&gt;ggplot2&lt;/li&gt;\n      &lt;li&gt;data.table&lt;/li&gt;\n      &lt;li&gt;sf&lt;/li&gt;\n      &lt;li&gt;patchwork&lt;/li&gt;\n      &lt;li&gt;ggtext&lt;/li&gt;\n      &lt;li&gt;waffle&lt;/li&gt;\n      &lt;li&gt;forcats&lt;/li&gt;\n      &lt;li&gt;and many more!&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n  &lt;div class=\"tools-column\"&gt;\n    &lt;h3&gt;Python Libraries&lt;/h3&gt;\n    &lt;ul&gt;\n      &lt;li&gt;matplotlib&lt;/li&gt;\n      &lt;li&gt;seaborn&lt;/li&gt;\n      &lt;li&gt;pandas&lt;/li&gt;\n      &lt;li&gt;numpy&lt;/li&gt;\n      &lt;li&gt;plotly&lt;/li&gt;\n      &lt;li&gt;hdx (Humanitarian Data Exchange)&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n&lt;h2&gt;Conversion to Quarto Website&lt;/h2&gt;\n&lt;p&gt;This website was created by converting individual R scripts to Quarto documents. Quarto provides an excellent way to combine code, visualizations, and narrative in a cohesive document. The website makes all visualizations and code accessible in one place.&lt;/p&gt;\n\n\n&lt;h2&gt;Acknowledgements&lt;/h2&gt;\n&lt;ul&gt;\n  &lt;li&gt;The #30DayChartChallenge community for inspiration and feedback&lt;/li&gt;\n  &lt;li&gt;Various data providers and sources used throughout the challenge&lt;/li&gt;\n  &lt;li&gt;Open source maintainers of the visualization libraries and tools&lt;/li&gt;\n&lt;/ul&gt;\n\n\n&lt;p&gt;Made with Quarto and GitHub Copilot&lt;/p&gt;\n&lt;p&gt;on a &lt;a href=\"https://frame.work/\" target=\"_blank\"&gt;Framework Laptop 13&lt;/a&gt; running &lt;a href=\"https://fedoraproject.org/kde/\" target=\"_blank\"&gt;Fedora KDE 42&lt;/a&gt; and &lt;a href=\"https://zed.dev/\" target=\"_blank\"&gt;Zed&lt;/a&gt;&lt;/p&gt;"
  },
  {
    "objectID": "about.html#the-challenge",
    "href": "about.html#the-challenge",
    "title": "About the 30 Day Chart Challenge",
    "section": "",
    "text": "Each day has a specific prompt that guides the creation of a visualization. The prompts are organized into categories such as “comparisons,” “distributions,” “relationships,” and more. This structure encourages participants to explore different types of data visualization and improve their skills across various domains."
  },
  {
    "objectID": "about.html#my-approach",
    "href": "about.html#my-approach",
    "title": "About the 30 Day Chart Challenge",
    "section": "",
    "text": "For this challenge, I primarily used:\n\nR with packages like ggplot2, patchwork, and sf for most visualizations\nPython with libraries like matplotlib, seaborn, and plotly for specific days\nVarious data sources including open data repositories, APIs, and self-collected data"
  },
  {
    "objectID": "about.html#tools-used",
    "href": "about.html#tools-used",
    "title": "About the 30 Day Chart Challenge",
    "section": "",
    "text": "ggplot2\ndata.table\nsf\npatchwork\nggtext\nwaffle\nforcats\nand many more!\n\n\n\n\n\nmatplotlib\nseaborn\npandas\nnumpy\nplotly\nhdx (Humanitarian Data Exchange)"
  },
  {
    "objectID": "about.html#conversion-to-quarto-website",
    "href": "about.html#conversion-to-quarto-website",
    "title": "About the 30 Day Chart Challenge",
    "section": "",
    "text": "This website was created by converting individual R scripts to Quarto documents. Quarto provides an excellent way to combine code, visualizations, and narrative in a cohesive document. The website makes all visualizations and code accessible in one place."
  },
  {
    "objectID": "about.html#acknowledgements",
    "href": "about.html#acknowledgements",
    "title": "About the 30 Day Chart Challenge",
    "section": "",
    "text": "The #30DayChartChallenge community for inspiration and feedback\nVarious data providers and sources used throughout the challenge\nOpen source maintainers of the visualization libraries and tools"
  },
  {
    "objectID": "2025/day_21.html",
    "href": "2025/day_21.html",
    "title": "day_21 - 30DayChartChallenge",
    "section": "",
    "text": "This document contains the R code for creating the plot for this day’s challenge.\n\n\nCode\nlibrary(rio)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(forcats)\nlibrary(waffle)\nlibrary(ggtext)\nlibrary(showtext)\nlibrary(patchwork)\nlibrary(ggsankey)\nlibrary(dplyr) # somehow ggsankey needs dplyr and does not import it\n\n# get data\ndat &lt;- import(\n  \"https://nyc3.digitaloceanspaces.com/owid-public/data/energy/owid-energy-data.csv\"\n)\nsetDT(dat)\n\n# round down to the nearest decade\nround_to_decade &lt;- function(year) {\n  return(year - year %% 10)\n}\n\n# energy sources and colors\nenergy_sources &lt;- c(\n  \"Coal\" = \"coal_consumption\",\n  \"Oil\" = \"oil_consumption\",\n  \"Gas\" = \"gas_consumption\",\n  \"Hydro\" = \"hydro_consumption\",\n  \"Nuclear\" = \"nuclear_consumption\",\n  \"Biofuel\" = \"biofuel_consumption\",\n  \"Solar\" = \"solar_consumption\",\n  \"Wind\" = \"wind_consumption\",\n  \"Other Renewables\" = \"other_renewable_consumption\"\n)\nenergy_colors = c(\n  \"Coal\" = \"#444239FF\", # very dark coal grey\n  \"Oil\" = \"#035F72FF\",\n  \"Gas\" = \"#D77186FF\",\n  \"Hydro\" = \"#A4B7E1FF\",\n  \"Nuclear\" = \"#E69F00\",\n  \"Biofuel\" = \"#B0986CFF\",\n  \"Solar\" = \"#F8D564FF\",\n  \"Wind\" = \"#56B4E9\",\n  \"Other Renewables\" = \"#1BB6AFFF\"\n)\n\n\n#------ Fonts\nfont_add_google(\"Roboto Condensed\", \"Roboto Condensed\")\nshowtext_auto()\nshowtext_opts(dpi = 600)\nbody_font &lt;- \"Roboto Condensed\"\ntitle_font &lt;- \"Roboto Condensed\"\n\n#------ WAFFLE PLOT (original)\n\n# sum consumption for France by source, every 10 years from 1960 to 2020\ndat_sum &lt;- dat[\n  year &gt;= 1960 & year &lt;= 2020 & country == \"France\",\n  lapply(.SD, function(x) sum(x, na.rm = TRUE)),\n  .SDcols = c(\n    \"biofuel_consumption\",\n    \"coal_consumption\",\n    \"gas_consumption\",\n    \"hydro_consumption\",\n    \"nuclear_consumption\",\n    \"oil_consumption\",\n    \"other_renewable_consumption\",\n    \"solar_consumption\",\n    \"wind_consumption\"\n  ),\n  by = .(country, decade = round_to_decade(year))\n]\n\n# pivot longer\ndat_sum &lt;- melt(dat_sum, id.vars = c(\"country\", \"decade\"))\n\n# Ccnsumption per year as perc of total\ndat_sum[, perc := (value / sum(value)) * 100, by = .(country, decade)]\n# Rrmove NA\ndat_sum &lt;- na.omit(dat_sum, cols = \"perc\")\n\n# ensure sum=100 for each decade\ndat_sum[, perc_int := as.integer(round(perc))][,\n  perc_int := {\n    current_sum &lt;- sum(perc_int)\n    if (current_sum != 100) {\n      diff &lt;- 100 - current_sum\n      perc_int[which.max(value)] &lt;- perc_int[which.max(value)] + diff\n    }\n    perc_int\n  },\n  by = decade\n][\n  perc_int &gt; 0\n]\n\n\n    country decade                    variable     value       perc perc_int\n     &lt;char&gt;  &lt;num&gt;                      &lt;fctr&gt;     &lt;num&gt;      &lt;num&gt;    &lt;int&gt;\n 1:  France   2010         biofuel_consumption   312.373  1.1008956        1\n 2:  France   2020         biofuel_consumption    30.800  1.2616927        1\n 3:  France   1960            coal_consumption  2384.688 32.1562993       32\n 4:  France   1970            coal_consumption  3588.286 17.0100869       17\n 5:  France   1980            coal_consumption  2907.669 12.1153319       12\n 6:  France   1990            coal_consumption  1938.677  6.6809355        7\n 7:  France   2000            coal_consumption  1535.992  4.9443499        5\n 8:  France   2010            coal_consumption  1143.226  4.0290694        4\n 9:  France   2020            coal_consumption    55.982  2.2932493        2\n10:  France   1960             gas_consumption   319.189  4.3041006        4\n11:  France   1970             gas_consumption  1709.201  8.1023802        8\n12:  France   1980             gas_consumption  2718.534 11.3272665       11\n13:  France   1990             gas_consumption  3500.474 12.0630930       12\n14:  France   2000             gas_consumption  4509.500 14.5160559       15\n15:  France   2010             gas_consumption  4366.272 15.3880448       15\n16:  France   2020             gas_consumption   405.828 16.6243576       17\n17:  France   1960           hydro_consumption   732.836  9.8819190       10\n18:  France   1970           hydro_consumption  1709.349  8.1030818        8\n19:  France   1980           hydro_consumption  1967.835  8.1993426        8\n20:  France   1990           hydro_consumption  1956.481  6.7422904        7\n21:  France   2000           hydro_consumption  1741.802  5.6068511        6\n22:  France   2010           hydro_consumption  1576.686  5.5567117        6\n23:  France   2020           hydro_consumption   162.052  6.6383059        7\n24:  France   1970         nuclear_consumption   514.926  2.4409805        2\n25:  France   1980         nuclear_consumption  5488.373 22.8683047       23\n26:  France   1990         nuclear_consumption 10397.570 35.8313914       36\n27:  France   2000         nuclear_consumption 12001.427 38.6325280       39\n28:  France   2010         nuclear_consumption 10915.617 38.4698900       38\n29:  France   2020         nuclear_consumption   891.721 36.5285018       37\n30:  France   1960             oil_consumption  3938.314 53.1061521       54\n31:  France   1970             oil_consumption 13527.222 64.1251065       65\n32:  France   1980             oil_consumption 10865.302 45.2722577       46\n33:  France   1990             oil_consumption 11135.164 38.3732372       38\n34:  France   2000             oil_consumption 10987.829 35.3697616       35\n35:  France   2010             oil_consumption  9127.721 32.1688112       32\n36:  France   2020             oil_consumption   728.389 29.8377619       30\n37:  France   2010 other_renewable_consumption   221.419  0.7803466        1\n38:  France   2020 other_renewable_consumption    28.128  1.1522367        1\n39:  France   2010           solar_consumption   171.060  0.6028665        1\n40:  France   2020           solar_consumption    33.396  1.3680353        1\n41:  France   2010            wind_consumption   540.069  1.9033642        2\n42:  France   2020            wind_consumption   104.869  4.2958587        4\n    country decade                    variable     value       perc perc_int\n\n\nCode\n# add levels and order by energy_sources\ndat_sum &lt;- dat_sum[,\n  variable := factor(\n    fct_recode(variable, !!!energy_sources),\n    levels = names(energy_sources)\n  )\n]\nsetorder(dat_sum, decade, variable)\n\n\n# Create waffle plot\nwaffle_plot &lt;- ggplot(dat_sum, aes(fill = variable, values = perc_int)) +\n  geom_waffle(\n    color = \"white\",\n    size = 0.2,\n    n_rows = 5,\n    flip = TRUE,\n    make_proportional = FALSE\n  ) +\n  facet_wrap(~decade, nrow = 1, strip.position = \"bottom\") +\n  theme_minimal() +\n  labs(\n    title = \"A Proportional Picture: France's Energy Mix by Decade ...\",\n    y = \"Percentage (%)\"\n  ) +\n  scale_x_discrete() +\n  scale_y_continuous(\n    labels = function(x) x * 5,\n    expand = c(0, 0)\n  ) +\n  scale_fill_manual(\n    values = energy_colors,\n    breaks = names(energy_sources),\n    name = \"Energy Source\",\n    drop = FALSE\n  ) +\n  theme(\n    text = element_text(family = body_font),\n    panel.grid = element_blank(),\n    axis.title = element_blank(),\n    axis.text.x = element_text(family = body_font, size = 10),\n    strip.text = element_text(family = body_font, size = 10),\n    legend.position = \"none\",\n    plot.title = element_textbox_simple(\n      hjust = 0.5,\n      size = 12,\n      family = title_font,\n      margin = margin(b = 30)\n    ),\n    plot.background = element_rect(color = \"white\", fill = \"white\"),\n    plot.margin = unit(c(30, 30, 30, 30), \"pt\")\n  )\n\n\n#------ YEARLY FOSSIL ENERGY PLOTS\n\n# prep yearly data for all sources\nyearly_all &lt;- dat[\n  year &gt;= 1960 & year &lt;= 2020 & country == \"France\",\n  lapply(.SD, function(x) sum(x, na.rm = TRUE)),\n  .SDcols = energy_sources,\n  by = .(year)\n]\n\n# melt to long format\nyearly_long &lt;- melt(\n  yearly_all,\n  id.vars = \"year\",\n  measure.vars = energy_sources,\n  variable.name = \"energy_type\",\n  value.name = \"consumption\"\n)\nyearly_long[,\n  energy_type := factor(\n    energy_type,\n    levels = energy_sources,\n    labels = names(energy_sources)\n  )\n]\n\n# assign color: fossil in color, others grey\nfossil_types &lt;- c(\"Coal\", \"Oil\", \"Gas\", \"Nuclear\")\n\n# factor for energy_type with non-fossils first, fossils last\nyearly_long$energy_type &lt;- factor(\n  yearly_long$energy_type,\n  levels = c(\n    setdiff(levels(yearly_long$energy_type), fossil_types),\n    fossil_types\n  )\n)\n\n# reorder the data so non-fossils come first, fossils last\nyearly_long &lt;- yearly_long[order(yearly_long$energy_type), ]\n\ncolor_map &lt;- setNames(\n  ifelse(\n    names(energy_sources) %in% fossil_types,\n    energy_colors[names(energy_sources)],\n    \"grey80\"\n  ),\n  names(energy_sources)\n)\n\n# calculate percentage of each source in total per year\nyearly_long[, perc := 100 * consumption / sum(consumption), by = year]\n\n# area chart (actually a sankey): absolute consumption by type (fossil in color, rest grey)\narea_plot &lt;- ggplot(\n  yearly_long[year %in% c(1960, 1970, 1980, 1990, 2000, 2010, 2020)],\n  aes(\n    x = year,\n    node = energy_type,\n    fill = energy_type,\n    value = consumption\n  )\n) +\n  geom_sankey_bump(\n    space = 0,\n    type = \"alluvial\",\n    color = \"transparent\",\n    smooth = 6,\n    alpha = 0.8\n  ) +\n  scale_fill_manual(values = color_map) +\n  scale_x_continuous(breaks = scales::pretty_breaks(), expand = c(0, 0)) +\n  scale_y_continuous(labels = scales::comma, expand = c(0, 0)) +\n  labs(\n    title = \"... Eventually, Proportions Hinder Gross Total Consumption Increase (or Not-So-Much Decrease)\",\n    x = NULL,\n    y = \"Consumption (TWh)\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(family = body_font),\n    axis.text = element_text(size = 10),\n    panel.grid.minor = element_blank(),\n    plot.title = element_textbox_simple(\n      hjust = 0.5,\n      size = 12,\n      family = title_font,\n      margin = margin(b = 20)\n    ),\n    legend.position = \"none\",\n    plot.margin = unit(c(30, 30, 30, 30), \"pt\")\n  )\n\n# line chart: share of each energy source in total (fossil + nuclear in color, rest grey)\nline_plot &lt;- ggplot(yearly_long, aes(x = year, y = perc, color = energy_type)) +\n  geom_line(size = 1) +\n  scale_color_manual(values = color_map) +\n  scale_x_continuous(breaks = scales::pretty_breaks(), expand = c(0, 0)) +\n  labs(\n    title = \"... Visualizing The Proportional Shift  Differently: The Decline of Coal and Oil, the Rise of Gas, and the Rapid Expansion of Nuclear ...\",\n    x = NULL,\n    y = \"Percentage (%)\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(family = body_font),\n    axis.text = element_text(size = 10),\n    panel.grid.minor = element_blank(),\n    plot.title = element_textbox_simple(\n      hjust = 0.5,\n      size = 12,\n      family = title_font,\n      margin = margin(b = 20)\n    ),\n    legend.position = \"none\",\n    plot.margin = unit(c(30, 30, 30, 30), \"pt\")\n  )\n\n\n#------ Title and text\n\n# old subtitle\nsubtitle_text &lt;- glue::glue(\n  \"In the 1960s, only &lt;span style='color:{energy_colors['Coal']};'&gt;&lt;strong&gt;coal&lt;/strong&gt;&lt;/span&gt;, \n    &lt;span style='color:{energy_colors['Oil']};'&gt;&lt;strong&gt;oil&lt;/strong&gt;&lt;/span&gt;, \n    &lt;span style='color:{energy_colors['Gas']};'&gt;&lt;strong&gt;gas&lt;/strong&gt;&lt;/span&gt;, and \n    &lt;span style='color:{energy_colors['Hydro']};'&gt;&lt;strong&gt;hydro&lt;/strong&gt;&lt;/span&gt; were part of the French primary energy consumption mix. By the 2020s, &lt;span style='color:{energy_colors['Nuclear']};'&gt;&lt;strong&gt;nuclear&lt;/strong&gt;&lt;/span&gt; energy became a player for almost 40%, and other sources appeared such as \n    &lt;span style='color:{energy_colors['Biofuel']};'&gt;&lt;strong&gt;biofuel&lt;/strong&gt;&lt;/span&gt;, \n    &lt;span style='color:{energy_colors['Solar']};'&gt;&lt;strong&gt;solar&lt;/strong&gt;&lt;/span&gt;, \n    &lt;span style='color:{energy_colors['Wind']};'&gt;&lt;strong&gt;wind&lt;/strong&gt;&lt;/span&gt;, and \n    &lt;span style='color:{energy_colors['Other Renewables']};'&gt;&lt;strong&gt;other renewable energy&lt;/strong&gt;&lt;/span&gt;. The French model for energy is singular. In 1973, nuclear power already accounted for 8% of the production of French electricity.\"\n)\n\n# caption\ncaption_text &lt;- glue::glue(\n  \"\n  &lt;span style='font-size:11pt; color:#777777'&gt;\n  Each square on the right chart represents 1% of total energy consumption for each decade from 1960 to 2020. These are proportions of total terawatt hours (TWh) consumed. Data: Our World in Data | Viz: @gnoblet\n  &lt;/span&gt;\"\n)\n\n# rectangles param\nymin_1stline &lt;- 0.20\nymax_1stline &lt;- 0.24\nymin_2ndline &lt;- 0.08\nymax_2ndline &lt;- 0.13\ntext_y_1stline &lt;- 0.18\ntext_y_2ndline &lt;- 0.07\ntext_size &lt;- 3.5\n\n# overall title and text panel\ntext_panel &lt;- ggplot() +\n  geom_textbox(\n    aes(\n      x = 0,\n      y = 1,\n      halign = 0,\n      valign = 1,\n      label = glue::glue(\n        \"&lt;span style='font-size:22pt; font-weight:bold'&gt;60 Years of France's Primary Energy Consumption &lt;/span&gt;\n        &lt;br&gt;&lt;br&gt;\n        &lt;span style='font-size:14pt'&gt;\n        Primary energy consumption measures the total energy used within a country, based on energy sources at the point of extraction or generation, and covers direct uses like electricity, heating, and transport. It does &lt;b&gt;not&lt;/b&gt; include the energy embedded in imported goods and services.\n        &lt;br&gt;&lt;br&gt;\n        {subtitle_text}\n        &lt;br&gt;&lt;br&gt;\n        {caption_text}\n        &lt;br&gt;&lt;br&gt;\n        &lt;span style='font-size:12pt;font-weight:bold'&gt;Primary energy sources:&lt;/span&gt;\"\n      ),\n      box.color = NA\n    ),\n    box.padding = unit(c(0, 0, 0, 0), \"pt\"),\n    box.margin = grid::unit(c(0, 0, 0, 0), \"pt\"),\n    box.r = unit(0, \"pt\"),\n    fill = NA,\n    hjust = 0,\n    vjust = 1,\n    lineheight = 1.1,\n    width = unit(0.95, \"npc\"),\n    family = body_font\n  ) +\n  # Add rectangle legends - Row 1\n  annotate(\n    \"rect\",\n    xmin = 0.1,\n    xmax = 0.17,\n    ymin = ymin_1stline,\n    ymax = ymax_1stline,\n    fill = energy_colors[\"Coal\"]\n  ) +\n  annotate(\n    \"rect\",\n    xmin = 0.25,\n    xmax = 0.32,\n    ymin = ymin_1stline,\n    ymax = ymax_1stline,\n    fill = energy_colors[\"Oil\"]\n  ) +\n  annotate(\n    \"rect\",\n    xmin = 0.4,\n    xmax = 0.47,\n    ymin = ymin_1stline,\n    ymax = ymax_1stline,\n    fill = energy_colors[\"Gas\"]\n  ) +\n  annotate(\n    \"rect\",\n    xmin = 0.55,\n    xmax = 0.62,\n    ymin = ymin_1stline,\n    ymax = ymax_1stline,\n    fill = energy_colors[\"Hydro\"]\n  ) +\n  annotate(\n    \"rect\",\n    xmin = 0.7,\n    xmax = 0.77,\n    ymin = ymin_1stline,\n    ymax = ymax_1stline,\n    fill = energy_colors[\"Nuclear\"]\n  ) +\n  # Row 2\n  annotate(\n    \"rect\",\n    xmin = 0.1,\n    xmax = 0.17,\n    ymin = ymin_2ndline,\n    ymax = ymax_2ndline,\n    fill = energy_colors[\"Biofuel\"]\n  ) +\n  annotate(\n    \"rect\",\n    xmin = 0.25,\n    xmax = 0.32,\n    ymin = ymin_2ndline,\n    ymax = ymax_2ndline,\n    fill = energy_colors[\"Solar\"]\n  ) +\n  annotate(\n    \"rect\",\n    xmin = 0.4,\n    xmax = 0.47,\n    ymin = ymin_2ndline,\n    ymax = ymax_2ndline,\n    fill = energy_colors[\"Wind\"]\n  ) +\n  annotate(\n    \"rect\",\n    xmin = 0.55,\n    xmax = 0.62,\n    ymin = ymin_2ndline,\n    ymax = ymax_2ndline,\n    fill = energy_colors[\"Other Renewables\"]\n  ) +\n  # Labels - Row 1\n  annotate(\n    \"text\",\n    x = 0.135,\n    y = text_y_1stline,\n    label = \"Coal\",\n    color = energy_colors[\"Coal\"],\n    size = text_size,\n    fontface = \"bold\",\n    family = body_font,\n    vjust = 1\n  ) +\n  annotate(\n    \"text\",\n    x = 0.285,\n    y = text_y_1stline,\n    label = \"Oil\",\n    color = energy_colors[\"Oil\"],\n    size = text_size,\n    fontface = \"bold\",\n    family = body_font,\n    vjust = 1\n  ) +\n  annotate(\n    \"text\",\n    x = 0.435,\n    y = text_y_1stline,\n    label = \"Gas\",\n    color = energy_colors[\"Gas\"],\n    size = text_size,\n    fontface = \"bold\",\n    family = body_font,\n    vjust = 1\n  ) +\n  annotate(\n    \"text\",\n    x = 0.585,\n    y = text_y_1stline,\n    label = \"Hydro\",\n    color = energy_colors[\"Hydro\"],\n    size = text_size,\n    fontface = \"bold\",\n    family = body_font,\n    vjust = 1\n  ) +\n  annotate(\n    \"text\",\n    x = 0.735,\n    y = text_y_1stline,\n    label = \"Nuclear\",\n    color = energy_colors[\"Nuclear\"],\n    size = text_size,\n    fontface = \"bold\",\n    family = body_font,\n    vjust = 1\n  ) +\n  # Labels - Row 2\n  annotate(\n    \"text\",\n    x = 0.135,\n    y = text_y_2ndline,\n    label = \"Biofuel\",\n    color = energy_colors[\"Biofuel\"],\n    size = text_size,\n    fontface = \"bold\",\n    family = body_font,\n    vjust = 1\n  ) +\n  annotate(\n    \"text\",\n    x = 0.285,\n    y = text_y_2ndline,\n    label = \"Solar\",\n    color = energy_colors[\"Solar\"],\n    size = text_size,\n    fontface = \"bold\",\n    family = body_font,\n    vjust = 1\n  ) +\n  annotate(\n    \"text\",\n    x = 0.435,\n    y = text_y_2ndline,\n    label = \"Wind\",\n    color = energy_colors[\"Wind\"],\n    size = text_size,\n    fontface = \"bold\",\n    family = body_font,\n    vjust = 1\n  ) +\n  annotate(\n    \"text\",\n    x = 0.585,\n    y = text_y_2ndline,\n    label = \"Other\\nRenewables\",\n    color = energy_colors[\"Other Renewables\"],\n    size = text_size,\n    fontface = \"bold\",\n    family = body_font,\n    vjust = 1\n  ) +\n  theme_void() +\n  theme(\n    plot.background = element_rect(fill = \"white\", color = NA),\n    plot.margin = unit(c(0, 0, 0, 0), \"pt\"),\n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank()\n  ) +\n  coord_cartesian(xlim = c(0, 1), ylim = c(0, 1), expand = FALSE)\n\n\n#------ Combine all plots with patchwork\n\n# 2x2 layout\ncombined_plot &lt;- (text_panel + waffle_plot) /\n  (line_plot + area_plot)\nplot_annotation(\n  theme = theme(\n    plot.background = element_rect(fill = \"white\", color = NA)\n  )\n)\n\n\n$title\nlist()\nattr(,\"class\")\n[1] \"waiver\"\n\n$subtitle\nlist()\nattr(,\"class\")\n[1] \"waiver\"\n\n$caption\nlist()\nattr(,\"class\")\n[1] \"waiver\"\n\n$tag_levels\nlist()\nattr(,\"class\")\n[1] \"waiver\"\n\n$tag_prefix\nlist()\nattr(,\"class\")\n[1] \"waiver\"\n\n$tag_suffix\nlist()\nattr(,\"class\")\n[1] \"waiver\"\n\n$tag_sep\nlist()\nattr(,\"class\")\n[1] \"waiver\"\n\n$theme\nList of 1\n $ plot.background:List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : logi NA\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi FALSE\n - attr(*, \"validate\")= logi TRUE\n\nattr(,\"class\")\n[1] \"plot_annotation\"\n\n\nCode\n# display\n#combined_plot\n\n# save\nggsave(\n  \"day_21.png\",\n  combined_plot,\n  height = 12,\n  width = 16,\n  dpi = 600\n)\n\n\n\n\n\n\n\nday_21 plot",
    "crumbs": [
      "Home",
      "Days",
      "day_21 - 30DayChartChallenge"
    ]
  },
  {
    "objectID": "2025/day_21.html#final-plot",
    "href": "2025/day_21.html#final-plot",
    "title": "day_21 - 30DayChartChallenge",
    "section": "",
    "text": "day_21 plot",
    "crumbs": [
      "Home",
      "Days",
      "day_21 - 30DayChartChallenge"
    ]
  },
  {
    "objectID": "2025/day_03.html",
    "href": "2025/day_03.html",
    "title": "day_03 - 30DayChartChallenge",
    "section": "",
    "text": "This document contains the R code for creating the plot for this day’s challenge.\n\n\nCode\nlibrary(rio)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(patchwork)\nlibrary(ggtext)\nlibrary(owidapi)\nlibrary(scico)\nlibrary(refugees)\nlibrary(paletteer)\n\n# Add Nunito font\nfont_add_google(name = \"Nunito\", family = \"Nunito\")\n\n# Load and preprocess data\ndat &lt;- refugees::idmc\niso &lt;- refugees::countries\nsetDT(dat)\ndat &lt;- dat[year == 2024]\ndat &lt;- merge(dat, iso, by.x = \"coa_iso\", by.y = \"iso_code\")\n\n# Merge population data\npop &lt;- owid_get(\"population\")\nsetDT(pop)\npop &lt;- pop[year == 2023 & entity_id != \"\"]\ndat &lt;- merge(dat, pop, by.x = \"coa_iso\", by.y = \"entity_id\")\n\n# Calculate IDP proportion per population\ndat[, prop := total / population_historical]\n\n# State of Palestine to Palestinee\n# Syrian Arab Rep. to Syria\n# Dem. Rep. of the Congo to Congo Kinshasa\ndat[name == \"State of Palestine\", name := \"Palestine\"]\ndat[name == \"Syrian Arab Rep.\", name := \"Syria\"]\ndat[name == \"Dem. Rep. of the Congo\", name := 'Congo Kinshasa']\n\n# Function to prepare top data and calculate angles\nprepare_top_data &lt;- function(data, column, top_n = 30) {\n  setorderv(data, column, order = -1)\n  top_data &lt;- data[1:top_n]\n  top_data[, id := 1:.N]\n  top_data[, coa_iso := factor(coa_iso, levels = coa_iso)]\n  \n  angle &lt;- 90 - 360 * (top_data$id - 0.5) / nrow(top_data)\n  top_data[, hjust := ifelse(angle &lt; -90, 1, 0)]\n  top_data[, angle := ifelse(angle &lt; -90, angle + 180, angle)]\n  \n  return(top_data)\n}\n\ntop10_total &lt;- prepare_top_data(dat, \"total\")\ntop10_prop &lt;- prepare_top_data(dat, \"prop\")\n\n# Function to create circular bar plots\ncreate_circular_plot &lt;- function(data, y_column, fill_label, lab_f) {\n  ggplot(data, aes(x = id, y = get(y_column), fill = get(y_column))) +\n    geom_col(alpha = 0.8, width = 1) +\n    coord_polar() +\n    scale_y_continuous(\n      limits = c(0, max(data[[y_column]]) * 1.2),\n      expand = expansion(mult = c(0.2, 0))\n    ) +\n    geom_text(\n      data = data[1:12],\n      aes(\n        y = get(y_column) + (max(get(y_column)) * 0.05),\n        label = name,\n        hjust = hjust\n      ),\n      color = \"black\",\n      size = 4,\n      angle = data$angle[1:12],\n      family = 'Nunito'\n    ) +\n    theme_minimal(base_family = 'Nunito') +\n    labs(x = NULL, y = NULL, fill = fill_label) +\n    theme(\n      axis.text = element_blank(),\n      panel.grid = element_blank(),\n      plot.background = element_rect(fill = \"white\", color = NA),\n      legend.position = c(0.5, 0.1),\n      legend.title = element_text(size = 12),\n      legend.text = element_text(size = 10),\n      plot.margin = margin(t = 10, b = 0)\n    ) +\n    scale_fill_paletteer_c(\n      \"scico::acton\",\n       direction = -1, \n       na.value = \"lightgray\",\n       labels = lab_f,\n       guide = guide_colorbar(\n         direction = \"horizontal\", # Horizontal layout\n         title.position = \"top\",\n         title.hjust = 0.5,\n         label.position = \"bottom\",\n         label.hjust = 0.5,\n         nrow = 1,\n         keywidth = unit(150, \"pt\"),  # Balanced key size\n   ))\n}\n\n\n\np1 &lt;- create_circular_plot(top10_total, \"total\", \"Number of IDPs\", lab_f = scales::label_number(scale_cut = scales::cut_short_scale()))\np2 &lt;- create_circular_plot(top10_prop, \"prop\", \"Proportion of IDPs\", lab_f = scales::label_percent(accuracy = 1))\n  \n# Create final layout\nfinal_layout &lt;- (p1 + p2) +\n  plot_layout(widths = c(1, 1)) +\n  plot_annotation(\n    title = \"&lt;b style='font-size:30px; color:#260C3F;'&gt;The Global Displacement Crisis (2024)&lt;/b&gt;&lt;br&gt;\n              &lt;span style='font-size:22px; color:#585380;'&gt;Two Metrics to Visualize Internally Displaced Persons (IDPs) &lt;/span&gt;&lt;br&gt;&lt;br&gt;\n              &lt;span style='font-size:16px; color:#404040;'&gt;\n              The left chart focuses on absolute numbers, showcasing the magnitude of displacement in countries like Sudan and the Democratic Republic of Congo. The right chart emphasizes the proportion of IDPs relative to population size, revealing the severity of impact in nations such as Palestine and Syria, where 1 in 3 people is displaced. &lt;br&gt; &lt;/span&gt;&lt;br&gt;\n              &lt;span style='font-size:14px; color:#9E9E9E;'&gt;Data: IDMC displacement data extracted from UNHCR's 'refugees' package & Our World In Data | Plot: @gnoblet&lt;/span&gt;\",\n    theme = theme(\n      plot.title = element_textbox_simple(\n        family = \"Nunito\", \n        size = 18, \n        hjust = 0.5,\n        halign = 0.5,\n        # no margin below, even negative\n        margin = margin(\n          l = 30,\n          r = 30,\n          b = 0,\n          t = 10)\n      )\n    )\n  )\n\ncreate_annotation &lt;- function(curve_x, curve_xend, curve_y, curve_yend,\n    text_x, text_y, label, text_width = 30) {\n      ggplot() +\n        geom_curve(\n        aes(x = curve_x, xend = curve_xend, \n        y = curve_y, yend = curve_yend),\n        curvature = -0.3,\n        angle = 120,\n        arrow = arrow(length = unit(0.01, \"npc\")),\n        linewidth = 0.5\n        ) +\n        annotate(\n        \"text\",\n        x = text_x,\n        y = text_y,\n        label = paste(strwrap(label, width = text_width), collapse = \"\\n\"),\n        size = 3.5,\n        hjust = 0,\n        family = \"Nunito\"\n        ) +\n        theme_void() +\n        coord_cartesian(xlim = c(0, 1), ylim = c(0, 1), expand = FALSE)\n}\n\n# Create final plot with annotations\np &lt;- wrap_elements(final_layout) +\n  inset_element(\n    create_annotation(\n      curve_x = 0.67, curve_xend = 0.74,\n      curve_y = 0.53, curve_yend = 0.57,\n      text_x = 0.49, text_y = 0.50,\n      label = \"In Palestine and in Syria, 1 person out of 3 is internally displaced.\",\n      text_width = 36\n    ),\n    left = 0, right = 1, bottom = 0, top = 1, align_to = 'full'\n  ) +\n  inset_element(\n    create_annotation(\n      curve_x = 0.18, curve_xend = 0.25,\n      curve_y = 0.52, curve_yend = 0.56,\n      text_x = 0.03, text_y = 0.46,\n      label = \"In Sudan, there are more than 9 million persons displaced, not counting refugees that crossed borders.\",\n      text_width = 30\n    ),\n    left = 0, right = 1, bottom = 0, top = 1, align_to = 'full'\n  )\n\n# save fig\nggsave(\n  \"day_03.png\",\n  height = 9,\n  width = 10,\n  dpi = 600,\n  type = \"cairo-png\"\n)\n\n\n\n\n\n\n\nday_03 plot",
    "crumbs": [
      "Home",
      "Days",
      "day_03 - 30DayChartChallenge"
    ]
  },
  {
    "objectID": "2025/day_03.html#final-plot",
    "href": "2025/day_03.html#final-plot",
    "title": "day_03 - 30DayChartChallenge",
    "section": "",
    "text": "day_03 plot",
    "crumbs": [
      "Home",
      "Days",
      "day_03 - 30DayChartChallenge"
    ]
  },
  {
    "objectID": "2025/day_02.html",
    "href": "2025/day_02.html",
    "title": "day_02 - 30DayChartChallenge",
    "section": "",
    "text": "This document contains the R code for creating the plot for this day’s challenge.\n\n\nCode\nlibrary(rio)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(ggtext)\nlibrary(refugees)\nlibrary(gghighlight)\nlibrary(paletteer)\n\n# get population data\ndat &lt;- refugees::population\nsetDT(dat)\n\n# sum total number of refugees per year\ndat_sum_year &lt;- dat[, \n  lapply(.SD, function(x) sum(x, na.rm = TRUE)), \n  .SDcols = c(\"refugees\", \"asylum_seekers\", \"returned_refugees\", \"idps\", \"returned_idps\", \"stateless\"),\n  by = .(year)]\n\n# add column of total\ndat_sum_year[, all_pop := refugees + asylum_seekers + returned_refugees + idps + returned_idps + stateless]\n\n# melt to long\ndat_sum_year_long &lt;- melt(\n  dat_sum_year,\n  variable.name = \"pop_type\",\n  value.name = \"n\",\n  id.vars = c(\"year\")\n)\n\n# recoding categories\ncat &lt;- c(\n  \"refugees\" = \"Refugees\",\n  \"asylum_seekers\" = \"Asylum Seekers\",\n  \"returned_refugees\" = \"Returned Refugees\",\n  \"idps\" = \"IDPs\",\n  \"returned_idps\" = \"Returned IDPs\",\n  \"stateless\" = \"Stateless\",\n  \"all_pop\" = \"Total\"\n)\n\n\ndat_sum_year_long[, pop_type := factor(pop_type, levels = names(cat), labels = cat)]\n\n# plot\n g &lt;- ggplot(dat_sum_year_long[pop_type != \"Total\"], \n       aes(x = year, y = n, group = pop_type, color = pop_type)) +\n  geom_line(size = 1) +\n  gghighlight(pop_type %in% c(\"Refugees\", \"IDPs\"), \n              use_direct_label = TRUE,\n              unhighlighted_params = list(color = \"gray60\", size = 0.2)) +\n  theme_dark(base_size = 14) +\n  scale_color_manual(values = c(\n    \"Refugees\" = \"#00B4D8\", \n    \"IDPs\" = \"#FF3D7F\"\n  )) +\n  scale_y_continuous(\n    labels = scales::label_number(scale_cut = scales::cut_short_scale()),\n    breaks = scales::breaks_extended(8)\n  ) +\n  # x scale with dates every 10 years\n  scale_x_continuous(\n    breaks = seq(1950, 2025, 10),\n    limits = c(1950, 2025)\n  ) +\n  # vline in 2015\n  geom_segment(\n    x = 2016,\n    xend = 2016,\n    y = -4e6,\n    yend = 7.2e7,\n    color = \"#FFD700\",\n    linetype = \"dashed\",\n    size = 0.3\n  ) +\n  annotate(\n    geom = \"text\",\n    x = 2016,\n    y = 7.4e7,\n    label = \"2016 Grand Bargain\",\n    color = \"#FFD700\",\n  ) +\n  geom_segment(\n    x = 2005,\n    xend = 2005,\n    y = -4e6,\n    yend = 7.2e7,\n    color = \"#FFD700\",\n    linetype = \"dashed\",\n    size = 0.3\n  ) +\n  annotate(\n    geom = \"text\",\n    x = 2005,\n    y = 7.4e7,\n    label = \"2005 reform\",\n    color = \"#FFD700\"\n  ) +\n  labs(\n    title = \"NULL\",\n    x = NULL,\n    y = NULL\n  ) +\n  theme(\n    plot.title = element_text(color = \"#FF6F61\", size = 18, hjust = 0, \n                              margin = margin(b = 20, l = -50)),\n    plot.title.position = \"plot\",\n    panel.background = element_rect(fill = \"gray10\"),\n    plot.background = element_rect(fill = \"gray10\"),\n    panel.grid.major = element_line(color = \"gray25\"),\n    panel.grid.minor = element_blank(),\n    axis.text = element_text(color = \"white\"),\n    axis.line = element_line(color = \"white\")\n  ) +\n  geom_textbox(\n    aes(x = 1955, y = 6.6e7),\n    label =\n      \"&lt;span style='color:#FFD700;font-size:28pt;'&gt;Global Displacement Trends&lt;/span&gt;&lt;br&gt;\n      &lt;span style='color:#FFC300;font-size:18pt;'&gt;Refugees and IDPs (1951-2024)&lt;/span&gt;&lt;br&gt;&lt;br&gt;\n      &lt;span style='color:#FFFFFF;font-size:12pt;'&gt;\n      Internally Displaced Persons (IDPs) have been forced to flee their homes due to conflict, violence, persecution or disasters, remaining within their own country while refugees cross broders.&lt;br&gt;&lt;br&gt;\n      &lt;span style='color:#FF3D7F'&gt;IDPs&lt;/span&gt; numbers show consistent growth since the mid-1990s. &lt;span style='color:#00B4D8'&gt;Refugees&lt;/span&gt; figures exhibit periodic surges and a constant increase since the early-2000s.&lt;/i&gt;&lt;br&gt;&lt;br&gt;\n      Data collection and standardization efforts through reforms have improved displacement tracking.&lt;/span&gt;\",\n    box.color = NA, \n    fill = NA,   \n    width = grid::unit(0.5, \"npc\"), \n    lineheight = 1.4,\n    hjust = 0, vjust = 1\n  ) \n\ng \n\n\n\n\n\n\n\n\n\nCode\n# save\nggsave(\n  \"day_02.png\",\n  height = 9,\n  width = 11,\n  dpi = 600,\n  type = \"cairo-png\"\n)\n\n\n\n\n\n\n\nday_02 plot"
  },
  {
    "objectID": "2025/day_02.html#final-plot",
    "href": "2025/day_02.html#final-plot",
    "title": "day_02 - 30DayChartChallenge",
    "section": "",
    "text": "day_02 plot"
  },
  {
    "objectID": "2025/day_01.html",
    "href": "2025/day_01.html",
    "title": "Day 01 - Fractions",
    "section": "",
    "text": "This visualization shows France’s energy mix evolution from 1960 to 2020, using waffle charts where each square represents 1% of total energy consumption for each decade.\n\n\nCode\nlibrary(rio)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(forcats)\nlibrary(waffle)\nlibrary(ggtext)\nlibrary(patchwork)\n\n# import \ndat &lt;- import(\"https://nyc3.digitaloceanspaces.com/owid-public/data/energy/owid-energy-data.csv\")\nsetDT(dat)\n\n# function to round down to the nearest decade\nround_to_decade &lt;- function(year) {\n  return(year - year %% 10)\n}\n\n# sum consumption for france by source, every 10 years from 1900 to 2020\ndat_sum &lt;- dat[year &gt;= 190 & year &lt;= 2020 & country == \"France\", \n  lapply(.SD, function(x) sum(x, na.rm = TRUE)), \n  .SDcols = c(\"biofuel_consumption\", \"coal_consumption\", \"gas_consumption\", \n              \"hydro_consumption\", \"nuclear_consumption\", \"oil_consumption\", \n              \"other_renewable_consumption\", \"solar_consumption\", \"wind_consumption\"),\n  by = .(country, decade = round_to_decade(year))]\n\n# pivot longer\ndat_sum &lt;- melt(dat_sum, id.vars = c(\"country\", \"decade\"))\n\n# consumption per year as perc of total\ndat_sum[, perc := (value / sum(value)) * 100, by = .(country, decade)]\n# remove NA\ndat_sum &lt;- na.omit(dat_sum, cols = \"perc\")\n\n# ensure sum=100 for each decade\ndat_sum[, perc_int := as.integer(round(perc))][,\n  perc_int := {\n    current_sum &lt;- sum(perc_int)\n    if (current_sum != 100) {\n      diff &lt;- 100 - current_sum\n      perc_int[which.max(value)] &lt;- perc_int[which.max(value)] + diff\n    }\n    perc_int\n  }, by = decade][\n  perc_int &gt; 0\n]\n\n\n    country decade                    variable     value       perc perc_int\n     &lt;char&gt;  &lt;num&gt;                      &lt;fctr&gt;     &lt;num&gt;      &lt;num&gt;    &lt;int&gt;\n 1:  France   2010         biofuel_consumption   312.373  1.1008956        1\n 2:  France   2020         biofuel_consumption    30.800  1.2616927        1\n 3:  France   1960            coal_consumption  2384.688 32.1562993       32\n 4:  France   1970            coal_consumption  3588.286 17.0100869       17\n 5:  France   1980            coal_consumption  2907.669 12.1153319       12\n 6:  France   1990            coal_consumption  1938.677  6.6809355        7\n 7:  France   2000            coal_consumption  1535.992  4.9443499        5\n 8:  France   2010            coal_consumption  1143.226  4.0290694        4\n 9:  France   2020            coal_consumption    55.982  2.2932493        2\n10:  France   1960             gas_consumption   319.189  4.3041006        4\n11:  France   1970             gas_consumption  1709.201  8.1023802        8\n12:  France   1980             gas_consumption  2718.534 11.3272665       11\n13:  France   1990             gas_consumption  3500.474 12.0630930       12\n14:  France   2000             gas_consumption  4509.500 14.5160559       15\n15:  France   2010             gas_consumption  4366.272 15.3880448       15\n16:  France   2020             gas_consumption   405.828 16.6243576       17\n17:  France   1960           hydro_consumption   732.836  9.8819190       10\n18:  France   1970           hydro_consumption  1709.349  8.1030818        8\n19:  France   1980           hydro_consumption  1967.835  8.1993426        8\n20:  France   1990           hydro_consumption  1956.481  6.7422904        7\n21:  France   2000           hydro_consumption  1741.802  5.6068511        6\n22:  France   2010           hydro_consumption  1576.686  5.5567117        6\n23:  France   2020           hydro_consumption   162.052  6.6383059        7\n24:  France   1970         nuclear_consumption   514.926  2.4409805        2\n25:  France   1980         nuclear_consumption  5488.373 22.8683047       23\n26:  France   1990         nuclear_consumption 10397.570 35.8313914       36\n27:  France   2000         nuclear_consumption 12001.427 38.6325280       39\n28:  France   2010         nuclear_consumption 10915.617 38.4698900       38\n29:  France   2020         nuclear_consumption   891.721 36.5285018       37\n30:  France   1960             oil_consumption  3938.314 53.1061521       54\n31:  France   1970             oil_consumption 13527.222 64.1251065       65\n32:  France   1980             oil_consumption 10865.302 45.2722577       46\n33:  France   1990             oil_consumption 11135.164 38.3732372       38\n34:  France   2000             oil_consumption 10987.829 35.3697616       35\n35:  France   2010             oil_consumption  9127.721 32.1688112       32\n36:  France   2020             oil_consumption   728.389 29.8377619       30\n37:  France   2010 other_renewable_consumption   221.419  0.7803466        1\n38:  France   2020 other_renewable_consumption    28.128  1.1522367        1\n39:  France   2010           solar_consumption   171.060  0.6028665        1\n40:  France   2020           solar_consumption    33.396  1.3680353        1\n41:  France   2010            wind_consumption   540.069  1.9033642        2\n42:  France   2020            wind_consumption   104.869  4.2958587        4\n    country decade                    variable     value       perc perc_int\n\n\nCode\n# legend of energy\nenergy_sources &lt;- c(\n  \"Coal\" = \"coal_consumption\",\n  \"Oil\" = \"oil_consumption\",\n  \"Gas\" = \"gas_consumption\",\n  \"Hydro\" = \"hydro_consumption\",\n  \"Nuclear\" = \"nuclear_consumption\",\n  \"Biofuel\" = \"biofuel_consumption\",\n  \"Solar\" = \"solar_consumption\",\n  \"Wind\" = \"wind_consumption\",\n  \"Other Renewables\" = \"other_renewable_consumption\"\n)\nenergy_colors = c(\n  \"Coal\" = \"#444239FF\", # very dark coal grey\n  \"Oil\" = \"#035F72FF\",\n  \"Gas\" = \"#D77186FF\",\n  \"Hydro\" = \"#A4B7E1FF\",\n  \"Nuclear\" = \"#E69F00\",\n  \"Biofuel\" = \"#B0986CFF\",\n  \"Solar\" = \"#F8D564FF\",\n  \"Wind\" = \"#56B4E9\",\n  \"Other Renewables\" = \"#1BB6AFFF\"\n)\nsubtitle_text &lt;- glue::glue(\n  \"In the 1960s, only &lt;span style='color:{energy_colors['Coal']};'&gt;&lt;strong&gt;coal&lt;/strong&gt;&lt;/span&gt;, \n    &lt;span style='color:{energy_colors['Oil']};'&gt;&lt;strong&gt;oil&lt;/strong&gt;&lt;/span&gt;, \n    &lt;span style='color:{energy_colors['Gas']};'&gt;&lt;strong&gt;gas&lt;/strong&gt;&lt;/span&gt;, and \n    &lt;span style='color:{energy_colors['Hydro']};'&gt;&lt;strong&gt;hydro&lt;/strong&gt;&lt;/span&gt; were part of the French energetic mix. By the 2020s, &lt;span style='color:{energy_colors['Nuclear']};'&gt;&lt;strong&gt;nuclear&lt;/strong&gt;&lt;/span&gt; energy grew to account for almost 40%, and other sources appeared such as \n    &lt;span style='color:{energy_colors['Biofuel']};'&gt;&lt;strong&gt;biofuel&lt;/strong&gt;&lt;/span&gt;, \n    &lt;span style='color:{energy_colors['Solar']};'&gt;&lt;strong&gt;solar&lt;/strong&gt;&lt;/span&gt;, \n    &lt;span style='color:{energy_colors['Wind']};'&gt;&lt;strong&gt;wind&lt;/strong&gt;&lt;/span&gt;, and \n    &lt;span style='color:{energy_colors['Other Renewables']};'&gt;&lt;strong&gt;other renewable energy&lt;/strong&gt;&lt;/span&gt;. While proportions help illustrate the balance between different energy sources, they can be misleading, as they hide the significant overall increase in the consumption of all energy sources.\"\n)\n# add levels and order by energy_sources\ndat_sum &lt;- dat_sum[,\n  variable := factor(\n    fct_recode(variable, !!!energy_sources),\n    levels = names(energy_sources)\n  )\n]\nsetorder(dat_sum, decade, variable)\n\n\n# plot\nbody_font &lt;- \"Carlito\"\ntitle_font&lt;- \"Carlito\"\ng &lt;- ggplot(dat_sum, aes(fill = variable, values = perc_int)) +\n  geom_waffle(\n    color = \"white\", \n    size = 0.2, \n    n_rows = 5, \n    flip = TRUE,\n    make_proportional = FALSE\n  ) +\n  facet_wrap(~decade, nrow = 1, strip.position = \"bottom\") +\n  theme_minimal() + \n  labs(\n    title = \"France's Energy Mix Evolution (1960-2020)\",\n    subtitle = subtitle_text,\n    caption = \"Each square represents 1% of total energy consumption for each decade from 1960 to 2020. These are proportions of total terawatt hours (TWh) consumed.&lt;br&gt;Data: Our World in Data | Heavily inspired by Muhammad Azhar's waffle plot on R Graph Gallery | Plot: @gnoblet\"\n  ) +\n  scale_x_discrete() + \n  scale_y_continuous(\n    labels = function(x) x * 5,\n    expand = c(0,0)) + \n  scale_fill_manual(\n        values = energy_colors,\n        breaks = names(energy_sources),  # Explicit legend order\n        name = \"Energy Source\",\n        drop = FALSE\n      ) +\n  theme(\n    # Grid\n    panel.grid = element_blank(),\n    # Axes\n    axis.title = element_blank(),\n    axis.text.x = element_text(family = body_font, size = 12),\n    # Strip\n    strip.text = element_text(family = body_font, size = 11),\n    # Legend\n    legend.position = \"none\",\n    # Title\n    plot.title = element_textbox_simple(\n      hjust = 0,\n      margin = margin(20, 0, 10, 0),\n      size = 20,\n      family = title_font,\n      face = \"bold\",\n      color = \"grey15\",\n      width = unit(0.9, \"npc\")\n    ),\n    # Subtitle\n    plot.subtitle = element_textbox_simple(\n      hjust = 0,\n      margin = margin(10, 0, 40, 0),\n      width = unit(0.9, \"npc\"),\n      size = 14,\n      family = body_font,\n      color = \"grey15\"),\n    # Caption\n    plot.caption = element_textbox_simple(\n      family = body_font,\n      face =\"plain\",\n      size = 11, \n      color = \"grey40\",\n      hjust = 0,\n      width =unit(0.95, \"npc\"),\n      margin = margin(10,0,0,0)\n    ),\n    # Background / esp for vector image\n    plot.background = element_rect(color = \"white\", fill = \"white\"),\n    plot.margin = margin(20, 20, 20, 20)\n  ) +\n  # Add arrow\n  geom_curve(\n    data = data.frame(x = 3.9, y = 21, xend = 4.9, yend = 24, decade = \"1970\"),\n    aes(x = x, y = y, xend = xend, yend = yend),\n    arrow = arrow(length = unit(0.03, \"npc\")),\n    curvature = -0.3,\n    color = \"black\",\n    inherit.aes = FALSE\n  )\n\ng &lt;- g + inset_element(\n  ggplot() +\n    geom_richtext(\n      aes(\n        x = 0.30,\n        y = 0.52,\n        label = \"&lt;span style='font-family:Carlito; font-size:15px;'&gt;In 1973, nuclear power was 8% of&lt;br&gt;the production of French electricity.&lt;/span&gt;\"\n      ),\n      fill = NA,\n      label.color = NA,\n      vjust = 0,\n      hjust = 0,\n      family = \"Carlito\"\n      ) +\n      theme_void() +\n      coord_cartesian(xlim = c(0, 1), ylim = c(0, 1), expand = FALSE),\n    left = 0, right = 1, bottom = 0, top = 1, align_to = 'full'\n)\n\n# save fig\nggsave(\n\"day_01.png\",\nheight = 6,\nwidth = 9,\ndpi = 600,\ntype = \"cairo-png\"\n)\n\n\n\n\n\n\n\n\nFrance’s Energy Mix Evolution (1960-2020)\n\n\n\n\n\nThis visualization uses data from Our World in Data to show how France’s energy sources have changed over six decades. The most notable change is the significant growth of nuclear energy in the energy mix, appearing in the 1970s and growing to account for almost 40% by the 2020s. The waffle chart format allows for easy comparison between decades, with each square representing 1% of total energy consumption.\nData source: Our World in Data - Energy\nTools: R (ggplot2, waffle, patchwork, data.table)"
  },
  {
    "objectID": "2025/day_01.html#final-plot",
    "href": "2025/day_01.html#final-plot",
    "title": "Day 01 - Fractions",
    "section": "",
    "text": "France’s Energy Mix Evolution (1960-2020)"
  },
  {
    "objectID": "2025/day_19.html",
    "href": "2025/day_19.html",
    "title": "Day 19 of 2025 #30DayChartChallenge",
    "section": "",
    "text": "This time, I’ll plot the World Food Programme Prices data. First, we get data from the ’‘’Global WFP Food Prices’’ dataset from the HDX API. and remove the first row which contains tags.\n\n\nCode\nfrom hdx.utilities.easy_logging import setup_logging\nfrom hdx.api.configuration import Configuration\nfrom hdx.data.dataset import Dataset\nimport pandas as pd\n\n\n/home/gnoblet/Documents/GitHub/30DayChartChallenge/.venv/lib/python3.13/site-packages/quantulum3/classifier.py:28: UserWarning: Classifier dependencies not installed. Run pip install quantulum3[classifier] to install them. The classifer helps to dissambiguate units.\n  warnings.warn(\n\n\n\n\nCode\n# setup\nsetup_logging()\nConfiguration.create(\n  hdx_site = \"prod\", \n  user_agent=\"@gnoblet_30DayChartChallenge\", \n  hdx_read_only = True)\n\ndataset = Dataset.read_from_hdx(\"global-wfp-food-prices\")\nurl = dataset.get_resource()['url']\n\n# get csv from url\ndf = pd.read_csv(url, dtype = str)\n\n# remove first row\ndf = df.iloc[1:]\n\n\n2025-05-27 13:12:26.626 | INFO     | hdx.api.configuration:__init__:96 - No HDX base configuration parameter. Using default base configuration file: /home/gnoblet/Documents/GitHub/30DayChartChallenge/.venv/lib/python3.13/site-packages/hdx/api/hdx_base_configuration.yaml.\n2025-05-27 13:12:26.627 | INFO     | hdx.api.configuration:__init__:99 - Loading HDX base configuration from: /home/gnoblet/Documents/GitHub/30DayChartChallenge/.venv/lib/python3.13/site-packages/hdx/api/hdx_base_configuration.yaml\n2025-05-27 13:12:26.635 | INFO     | hdx.api.configuration:__init__:132 - No HDX configuration parameter. Using default configuration file: /home/gnoblet/.hdx_configuration.yaml.\n2025-05-27 13:12:26.636 | INFO     | hdx.api.configuration:__init__:142 - Loading HDX configuration from: /home/gnoblet/.hdx_configuration.yaml\n2025-05-27 13:12:26.637 | INFO     | hdx.api.configuration:__init__:230 - Read only access to HDX: True\n\n\nLet’s keep only Sub-Saharan countries in the West African region (using XOF, recorded as such in the dataset). Let’s also focus on the local prices for rice.\n\n\nCode\n# keep only Sub-Saharan countries curreency being set to XOF\ndf = df[df['currency'] == 'XOF']\n\n# keep only local prices for rice\ndf = df[df['commodity_id'] == '71']\n\n\nThere is some needed data wrangling now since there are different units, and in particular where the unit is 1KG, only KG is written in column ‘unit’.\n\n\nCode\n# split at the first space\nsplits = df['unit'].str.split(' ', n = 1, expand=True)\n\n# If the first part is not numeric, move it to the second part and set the first to '0'\nmask_text_only = ~splits[0].str.isnumeric()\nsplits.loc[mask_text_only, 1] = splits.loc[mask_text_only, 0]\nsplits.loc[mask_text_only, 0] = '1'\n\n# Fill NaN in the second part with None or ''\nsplits[1] = splits[1].fillna('')\n\n# Assign columns\ndf['div'] = splits[0].astype(int)\ndf['unit_only'] = splits[1]\n\n# price as double\ndf['price'] = df['price'].astype(float)\n\n# case_when \n# if unit_only is KG, divide price by div\n# if unit_only is marmite, divide price by 2.5 (FAO: marmite is 2.5kg, seems to be in Haiti only, can be removed eventually since HTI is not XOF)\ndf['price_kg'] = df.apply(lambda x: x['price'] / x['div'] if x['unit_only'] == 'KG' else x['price'] / 2.5, axis=1)\n\n\nNow, before I move on to plot, I want to get the median price by country and date, and get neat country names. For this, I need to convert the date column to datetime, summarize and get unique median price by countryiso3 and date, and add country names from a wonderful iso dictionary.\n\n\nCode\ndf['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values('date')\n\n# summarize and get unique median price by countryiso3 and date\ndf = df.groupby(['countryiso3', 'date'])['price_kg'].median().reset_index()\n\n\n\n\nCode\n# add country names from iso dictionary\niso = {\n  'BEN': 'Benin',\n  'BFA': 'Burkina Faso',\n  'CIV': 'Ivory Coast',\n  'GNB': 'Guinea-Bissau',\n  'MLI': 'Mali',\n  'NER': 'Niger',\n  'SEN': 'Senegal'\n}\n\ndf['country_name'] = df['countryiso3'].map(iso)\n\n\nOn to the plot! Using seaborn now we will plot time series of prices using small multiples by country. Let’s load the packages needed and set up the theme.\n\n\nCode\nimport seaborn as sns\nimport matplotlib.dates as mdates\nimport textwrap\nimport matplotlib.pyplot as plt\n\n\n# set up a theme\nsns.set_theme(\n  style = 'whitegrid',\n  font = 'Carlito',\n  rc = {\"grid.linewidth\": 0.3})\n\n\nThere are only seven countries in this dataset. I add dummy rows to be able to plot empty countries first that will leave space for the plot title on the basis of a 3-column row. There may very well be more elegant solutions but I couldn’t find any.\nThe plot follows this structure: - use sns.relplot to plot each year’s time series in its own facet; - loop through each facet to add all countries except the dummy ones.\n\n\nCode\n# add dummy rows to plot emoty countries first\ndummy_rows = pd.DataFrame({\n    'date': [df['date'].min(), df['date'].min()],\n    'price_kg': [None, None],\n    'country_name': ['cty1', 'cty2']\n})\ndf2 = pd.concat([dummy_rows, df], ignore_index=True)\n\n# plot each year's time series in its own facet\ng = sns.relplot(\n    data = df2,\n    x = \"date\", \n    y = \"price_kg\", \n    col = \"country_name\", \n    hue = \"country_name\",\n    kind = \"line\",\n    palette = \"Set2\", \n    linewidth = 4, \n    zorder = 5,\n    col_wrap = 3, \n    height = 2, \n    aspect = 1.5, \n    legend = False,\n    col_order = ['cty1', 'cty2'] + sorted(df['country_name'].unique())\n)\n# loop through each facet\nfor country_name, ax in g.axes_dict.items():\n    if country_name in ['cty1', 'cty2']:\n        # Hide axes for dummy facets\n        ax.axis('off')\n    else:\n        # Your normal plotting code\n        ax.text(.05, .93, country_name, transform = ax.transAxes)\n        sns.lineplot(\n            data = df2[df2['country_name'] != country_name], \n            x = \"date\", \n            y = \"price_kg\", \n            units = \"country_name\",\n            estimator = None,\n            color = \"black\", \n            linewidth = 0.2, \n            ax = ax\n        )\n\n\n/tmp/ipykernel_255860/3570561818.py:7: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.\n  df2 = pd.concat([dummy_rows, df], ignore_index=True)\n\n\n\n\n\n\n\n\n\nNow that I got the base plot, I can add some nice touches. First, I want to set the x-axis to show only years, remove titles and set the y-axis label to XOF.\n\n\nCode\n# format x-axis to show only years\nfor ax in g.axes.flatten():\n    ax.xaxis.set_major_locator(mdates.YearLocator())\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n    for label in ax.get_xticklabels():\n        label.set_rotation(0)\n        label.set_horizontalalignment('center')\n    # Enable grid only for major ticks (years)\n    ax.grid(which='major', axis='x', linestyle='-', linewidth=0.2)\n\n# tweak the supporting aspects of the plot\ng.set_titles(\"\")\ng.set_axis_labels(\"\", \"XOF\")\n\n\nSecond, it’s time to set titles, caption, etc.\n\n\nCode\n# some layout style aka titles and caption\npalette = sns.color_palette(\"Set2\")\ntitle_color = palette[0]\ntitle = \"How smooth are changes in local rice prices in Western Sub-Saharan Africa?\"\nsubtitle = \"The graph displays median prices of local rice for 7 sub-sahar an countries from 2022 to today, where XOF is the main currency---coded as such in the dataset. The associated Quarto document emphasizes both how to download data from the HDX API and the use of small multiples to show the evolution of prices over time across countries.\"\ncaption = \"Data: HDX - WFP Food Prices | Viz: @gnoblet\"\n# wrap characters and then add text\ntitle_w = \"\\n\".join(textwrap.wrap(title, width = 50))\nsubtitle_w = \"\\n\".join(textwrap.wrap(subtitle, width = 70))\nplt.figtext(0.05, 0.9, title_w, fontsize = 23, color = title_color, wrap = True)\nplt.figtext(0.05, 0.75, subtitle_w, fontsize = 16, color = 'black', wrap = True)\nplt.figtext(0.05, 0.70, caption, fontsize = 12, color = 'black', wrap = True)\n\n\nText(0.05, 0.7, 'Data: HDX - WFP Food Prices | Viz: @gnoblet')\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\nNow, we eventually would like to save this plot.s\n\n\nCode\n# save plot\nplt.savefig('day_19.png', dpi = 600)\n\n# close plot\nplt.close()",
    "crumbs": [
      "Home",
      "Days",
      "Day 19 of 2025 #30DayChartChallenge"
    ]
  },
  {
    "objectID": "2025/day_09.html",
    "href": "2025/day_09.html",
    "title": "day_09 - 30DayChartChallenge",
    "section": "",
    "text": "This document contains the R code for creating the plot for this day’s challenge.\n\n\nCode\nlibrary(owidapi)\nlibrary(ggplot2)\nlibrary(data.table)\nlibrary(geofacet)\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(ggtext)\n\n\n# Retrieve life satisfaction distribution data from OWID\ndat  &lt;- owid_get(\n  chart_id = \"happiness-cantril-ladder\"\n)\nsetDT(dat)\n\n# i want to keep only african countries:\ndata(\"africa_countries_grid1\", package = \"geofacet\")\ncty &lt;- africa_countries_grid1\n\n# recode differently names countries\ndat &lt;-  dat[, entity_name := fcase(\n  entity_name == \"Democratic Republic of Congo\" , \"Democratic Republic of the Congo\",\n  entity_name == \"Cote d'Ivoire\", \"Côte d'Ivoire\",\n  entity_name == \"Republic of Congo\", \"Congo\",\n  default = entity_name\n)]\n\n# merge and remove empty codes\ndat_cty &lt;- dat[cty, on = .(entity_name = name)][!is.na(code)]\ndat_cty[, avg_score := mean(cantril_ladder_score, na.rm = TRUE), by = year]\n\n#------ Colors and fonts\nfont_add_google(\"Nunito\", \"Nunito\")\nshowtext_auto()\nshowtext_opts(dpi = 600)\n\n\nbody_font &lt;- \"Nunito\"\ntitle_font &lt;- \"Nunito\"\ncol_fill &lt;- \"#00CFC8\"\ncol_line &lt;- \"#112D4E\"\npanel_bg_col &lt;- \"#F0F0F0\"\nbg_col &lt;- \"#FFFFFF\"\ntext_col &lt;- \"#2A2A2A\"\n\n# Updated tag with engaging explanation\n\ntag &lt;- \"\n  &lt;span style='font-size:20pt;color:#00CFC8;'&gt;**Self-Reported Life Satisfaction in Africa**&lt;/span&gt;&lt;br&gt;\n\n  &lt;span style='font-size:12pt;color:#2A2A2A;'&gt;The Cantril Ladder is a tool used to measure life satisfaction. Imagine a ladder with 11 steps: &lt;span style='color:#2A2A2A;'&gt;**0**&lt;/span&gt; represents the *worst possible life* and &lt;span style='color:#00CFC8;'&gt;**10**&lt;/span&gt; represents the *best possible life*. People rate their current lives on this scale, offering a snapshot of well-being.&lt;/span&gt;&lt;br&gt;\n\n  &lt;span style='font-size:12pt;color:#2A2A2A;'&gt;This visualization focuses on African countries from 2011 to 2020. The &lt;span style='color:#00CFC8;'&gt;**aquamarine areas**&lt;/span&gt; show yearly country averages, while the &lt;span style='color:#112D4E;'&gt;**midnight line**&lt;/span&gt; represents the average score across all African countries This average provides a benchmark for comparison.&lt;/span&gt;\n\n  &lt;span style='font-size:12pt;color:#2A2A2A;'&gt; Note data is missing for given years, for instance in Djibouti (DJ) or South Sudan (SSD), or entirely for certain countries like Eritrea (ER) or Capo Verde (CV).&lt;br&gt;\n\n  &lt;span style='font-size:9pt;color:#6D6D6D;'&gt;Data: Our World in Data on Self-Reported Life Satisfaction | Viz: @gnoblet&lt;/span&gt;\n\"\n\ng &lt;- ggplot(dat_cty, aes(x = year, y = cantril_ladder_score, group = code)) +\n  geom_area(fill = col_fill, alpha = 0.3) +\n  geom_line(aes(y = avg_score), color = col_line, linewidth = 0.5) +\n  labs(\n    tag = tag,\n    x = NULL,\n    y = NULL\n  ) +\n  scale_y_continuous(limits = c(0, 10)) +\n  theme_minimal() +\n  facet_geo(~ code, grid = \"africa_countries_grid1\") +\n  theme(\n    text = element_text(family = body_font, color = text_col),\n    axis.text = element_blank(),\n    panel.background = element_rect(fill = panel_bg_col, color = NA),\n    plot.background = element_rect(fill = bg_col, color = NA),\n    panel.grid = element_blank(),\n    plot.margin = margin(20,450, 20, 20),\n    plot.tag.position = c(1.1, 0.5),\n    plot.tag = element_textbox_simple(\n      width = unit(4.3, \"inch\"),\n      lineheight = 1.2,\n      hjust = 0,\n      maxwidth = 1\n    ),\n    strip.text = element_text(color = text_col, size = 9)\n  )\n\ng\n\n\n\n\n\n\n\n\n\nCode\n# save\nggsave(\n  \"day_09.png\",\n  dpi = 600,\n  width = 13,\n  height = 11\n)\n\n\n\n\n\n\n\nday_09 plot",
    "crumbs": [
      "Home",
      "Days",
      "day_09 - 30DayChartChallenge"
    ]
  },
  {
    "objectID": "2025/day_09.html#final-plot",
    "href": "2025/day_09.html#final-plot",
    "title": "day_09 - 30DayChartChallenge",
    "section": "",
    "text": "day_09 plot",
    "crumbs": [
      "Home",
      "Days",
      "day_09 - 30DayChartChallenge"
    ]
  },
  {
    "objectID": "2025/day_07.html",
    "href": "2025/day_07.html",
    "title": "day_07 - 30DayChartChallenge",
    "section": "",
    "text": "This document contains the R code for creating the plot for this day’s challenge.\n\n\nCode\nlibrary(HistData)\nlibrary(tidyverse)\nlibrary(outliers)     # For Grubbs' test\nlibrary(DMwR2)        # For LOF\nlibrary(solitude)     # For Isolation Forest\nlibrary(EnvStats)     # For Rosner's test\nlibrary(ggplot2)\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(ggtext)\nlibrary(Cairo)\n\ndata(Pollen)\n\n# Prepare data\ndat &lt;- Pollen\n\n# Outlier flagging\noutlier_flags &lt;- dat |&gt;\n  mutate(\n    # 1. Grubbs' Test\n    Grubbs = {\n      test &lt;- grubbs.test(density)\n      ifelse(density == ifelse(grepl(\"highest\", test$alternative),\n                            max(density), min(density)),\n             test$p.value &lt; 0.05, FALSE)\n    },\n\n    # 2. IQR (1.5x)\n    IQR = density %in% boxplot.stats(density)$out,\n\n    # 3. Z-score (&gt;3)\n    Zscore = abs(scale(density)) &gt; 3,\n\n    # 4. Hampel Filter (3 MAD)\n    Hampel = abs(density - median(density)) &gt; 3 * mad(density),\n\n    # 5. Modified Z-score (&gt;3.5)\n    ModZscore = (0.6745 * (density - median(density))) / mad(density) &gt; 3.5,\n\n    # 6. Isolation Forest\n    ISO_Forest = {\n        iso &lt;- isolationForest$new(sample_size = 50)  # Reduced from default 256\n        iso$fit(data.frame(density = density))\n        iso$predict(data.frame(density = density))$anomaly_score &gt; 0.65\n    },\n\n    # 7. Local Outlier Factor (LOF)\n    LOF = lofactor(density, k = 5) &gt; 1.5,\n\n    # 8. Tukey's Fences (3x IQR)\n    Tukey = {\n      q &lt;- quantile(density)\n      iqr &lt;- IQR(density)\n      density &lt; (q[1] - 3*iqr) | density &gt; (q[3] + 3*iqr)\n    },\n\n    # 9. Rosner's Test (10 potential outliers)\n    Rosner = density %in% (rosnerTest(density, k = 10)$all.stats$Value),\n\n    # 10. 4 Sigma Rule\n    Four_Sigma = abs(density - mean(density)) &gt; 4 * sd(density)\n  )\n\n\nINFO  [15:19:58.015] dataset has duplicated rows\nINFO  [15:19:58.032] Building Isolation Forest ...\nINFO  [15:19:58.712] done\nINFO  [15:19:58.712] Computing depth of terminal nodes ...\nINFO  [15:19:58.939] done\nINFO  [15:19:58.994] Completed growing isolation forest\n\n\nCode\n# Count # of outliers to order counts by methods\noutlier_counts &lt;- outlier_flags |&gt;\n  pivot_longer(cols = Grubbs:Four_Sigma,\n               names_to = \"Method\", values_to = \"Outlier\") |&gt;\n  group_by(Method) |&gt;\n  summarize(Count = sum(Outlier)) |&gt;\n  arrange(desc(Count))\noutlier_flags &lt;- outlier_flags |&gt;\n  pivot_longer(\n    cols = Grubbs:Four_Sigma,\n    names_to = \"Method\", values_to = \"Outlier\") |&gt;\n  mutate(Method = factor(\n    Method,\n    levels = outlier_counts$Method,\n    ordered = TRUE))\n\n# Plot\noutlier_flags |&gt;\n  ggplot(aes(x = ridge, y = density)) +\n  # Plot non-outliers first with transparency\n  geom_point(data = ~subset(., !.$Outlier), aes(color = Outlier), size = 1.5, alpha = 0.6) +\n  # Overlay outliers with transparency and distinct color\n  geom_point(data = ~subset(., .$Outlier), aes(color = Outlier), size = 1.5, alpha = 0.8) +\n  geom_smooth(data = ~subset(., !.$Outlier), method = \"loess\", color = \"#415161\", lwd = 0.4, level = 0.99) +\n  facet_wrap(~ Method, ncol = 2, scales = \"free_y\") +\n  scale_color_manual(values = c(\"#D3D3D3\", \"#3498db\")) +\n  labs(\n    title = \"&lt;span style='font-size:22pt; color:#415161; font-weight:700'&gt;DETECTING OUTLIERS OF POLLEN DENSITY&lt;/span&gt;&lt;br&gt;\n            &lt;span style='font-size:18pt; color:#3498db'&gt;One-Dimensional Methods Ranked by the Most Outliers Found First&lt;/span&gt;\",\n    subtitle = \"&lt;span style='color:#555555; font-size:11pt'&gt;A quick glance at a fictional one-dimension outlier detection for this fictional dataset, originally crafted by David Coleman at RCA Laboratories in Princeton, N.J., and presented as a challenge at the 1986 American Statistical Association meeting. This visualization pits ten outlier detection methods against each other to uncover somewhat misfit density of pollen grains while plotting the relationship of ridge against density. Blue points are the outliers that dared to stand out, while grey points play it safe in the crowd.&lt;/span&gt;\",\n    caption = \"&lt;span style='color:#777777; font-size:8pt'&gt;Data source: HistData::Pollen | Visualization: @gnoblet&lt;/span&gt;\"\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    strip.text = element_text(\n      size = 9,\n      color = \"#415161\",\n      margin = margin(5,0,5,0)\n    ),\n    plot.title = element_textbox_simple(\n      padding = margin(0, 0, 5, 0),\n      lineheight = 1.2,\n      halign = 0\n    ),\n    plot.subtitle = element_textbox_simple(\n      size = 10,\n      lineheight = 1.3,\n      padding = margin(10, 0, 25, 0),\n      width = grid::unit(0.95, 'npc'),\n      halign = 0\n    ),\n    plot.caption = element_textbox_simple(\n      hjust = 1,\n      margin = margin(15,0,0,0),\n    ),\n    axis.text.x = element_text(\n      size = 8,\n      color = \"#555555\"\n    ),\n    axis.text.y = element_text(\n      size = 8,\n      color = \"#555555\"\n    ),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.background = element_rect(fill = \"white\", color = NA),\n    panel.grid.major = element_line(color = \"#f0f0f0\", linewidth = 0.4),\n    panel.grid.minor = element_blank(),\n    plot.margin = margin(20,20,20,20),\n    plot.background = element_rect(fill = \"white\")\n  )\n\n\n\n\n\n\n\n\n\nCode\n # save\nggsave(\n  \"day_07.png\",\n  dpi = 600,\n  width = 10,\n  height = 10,\n)\n\n\n\n\n\n\n\nday_07 plot"
  },
  {
    "objectID": "2025/day_07.html#final-plot",
    "href": "2025/day_07.html#final-plot",
    "title": "day_07 - 30DayChartChallenge",
    "section": "",
    "text": "day_07 plot"
  },
  {
    "objectID": "chart_template.html",
    "href": "chart_template.html",
    "title": "Day XX - Title",
    "section": "",
    "text": "Brief description of the chart and the data used.\n\n\n\n\n\nCode\n# Load libraries\nlibrary(ggplot2)\n# Add your other libraries here\n\n# Data preparation\n# Add your data preparation code here\n\n# Create visualization\n# Add your plotting code here\n\n# Save the plot\nggsave(\n  \"day_xx.png\",\n  height = 7,\n  width = 10,\n  dpi = 300\n)\n\n\n\n\n\n\n\n\nDay XX plot\n\n\n\n\n\nAdditional information about the visualization, data sources, and any challenges or insights."
  },
  {
    "objectID": "chart_template.html#overview",
    "href": "chart_template.html#overview",
    "title": "Day XX - Title",
    "section": "",
    "text": "Brief description of the chart and the data used."
  },
  {
    "objectID": "chart_template.html#code",
    "href": "chart_template.html#code",
    "title": "Day XX - Title",
    "section": "",
    "text": "Code\n# Load libraries\nlibrary(ggplot2)\n# Add your other libraries here\n\n# Data preparation\n# Add your data preparation code here\n\n# Create visualization\n# Add your plotting code here\n\n# Save the plot\nggsave(\n  \"day_xx.png\",\n  height = 7,\n  width = 10,\n  dpi = 300\n)"
  },
  {
    "objectID": "chart_template.html#final-plot",
    "href": "chart_template.html#final-plot",
    "title": "Day XX - Title",
    "section": "",
    "text": "Day XX plot"
  },
  {
    "objectID": "chart_template.html#notes",
    "href": "chart_template.html#notes",
    "title": "Day XX - Title",
    "section": "",
    "text": "Additional information about the visualization, data sources, and any challenges or insights."
  },
  {
    "objectID": "index.html#categories-and-prompts",
    "href": "index.html#categories-and-prompts",
    "title": "30DayChartChallenge",
    "section": "",
    "text": "01. Fractions\n02. Slope\n03. Circular\n\nBig or Small\n\n\nRanking\n\n\nFlorence Nightingale (theme day)\n\n\n\n\n\n\n07. Outliers\n08. Histogram\n09. Diverging\n\nMulti-modal\n\n11. Stripes\n\nData.gov (data day)\n\n\n\n\n\n\n\nClusters\n\n\nKinship\n\n\nComplicated\n\n16. Negative\n17. Birds\n\nEl Pais (theme day)\n\n\n\n\n\n\n19. Smooth\n20. Urbanization\n21. Fossils\n\nStars\n\n\nLog Scale\n\n\nWorld Health Organization (data day)\n\n\n\n\n\n\n\nRisk\n\n\nMonochrome\n\n\nNoise\n\n\nInclusion\n\n\nExtraterrestrial\n\n\nNational Geographic (theme day)"
  },
  {
    "objectID": "index.html#featured-visualizations",
    "href": "index.html#featured-visualizations",
    "title": "30DayChartChallenge",
    "section": "",
    "text": "Day 21 - Fossils\n\n\n\n\n\nDay 19 - Smooth\n\n\n\n\n\nDay 17 - Birds\n\n\n\n\n&lt;p&gt;Made with Quarto and GitHub Copilot&lt;/p&gt;\n&lt;p class=\"author\"&gt;on a Framework Laptop 13 running Fedora KDE 42 and Zed&lt;/p&gt;"
  },
  {
    "objectID": "gallery.html",
    "href": "gallery.html",
    "title": "Gallery Redirect",
    "section": "",
    "text": "Redirecting to Gallery…"
  },
  {
    "objectID": "gallery.html#comparisons",
    "href": "gallery.html#comparisons",
    "title": "Gallery ✴ 2025",
    "section": "",
    "text": "&lt;div class=\"col-md-4 col-sm-6 day-card\"&gt;\n  &lt;div class=\"card\"&gt;\n    &lt;a href=\"2025/day_01.qmd\"&gt;\n      &lt;img src=\"2025/day_01.png\" class=\"card-img-top\" alt=\"Day 01\"&gt;\n      &lt;div class=\"card-body\"&gt;\n        &lt;h5 class=\"card-title\"&gt;01. Fractions&lt;/h5&gt;\n      &lt;/div&gt;\n    &lt;/a&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"col-md-4 col-sm-6 day-card\"&gt;\n  &lt;div class=\"card\"&gt;\n    &lt;a href=\"2025/day_02.qmd\"&gt;\n      &lt;img src=\"2025/day_02.png\" class=\"card-img-top\" alt=\"Day 02\"&gt;\n      &lt;div class=\"card-body\"&gt;\n        &lt;h5 class=\"card-title\"&gt;02. Slope&lt;/h5&gt;\n      &lt;/div&gt;\n    &lt;/a&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"col-md-4 col-sm-6 day-card\"&gt;\n  &lt;div class=\"card\"&gt;\n    &lt;a href=\"2025/day_03.qmd\"&gt;\n      &lt;img src=\"2025/day_03.png\" class=\"card-img-top\" alt=\"Day 03\"&gt;\n      &lt;div class=\"card-body\"&gt;\n        &lt;h5 class=\"card-title\"&gt;03. Circular&lt;/h5&gt;\n      &lt;/div&gt;\n    &lt;/a&gt;\n  &lt;/div&gt;\n&lt;/div&gt;"
  },
  {
    "objectID": "gallery.html#distributions",
    "href": "gallery.html#distributions",
    "title": "Gallery ✴ 2025",
    "section": "",
    "text": "&lt;div class=\"col-md-4 col-sm-6 day-card\"&gt;\n  &lt;div class=\"card\"&gt;\n    &lt;a href=\"2025/day_07.qmd\"&gt;\n      &lt;img src=\"2025/day_07.png\" class=\"card-img-top\" alt=\"Day 07\"&gt;\n      &lt;div class=\"card-body\"&gt;\n        &lt;h5 class=\"card-title\"&gt;07. Outliers&lt;/h5&gt;\n      &lt;/div&gt;\n    &lt;/a&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"col-md-4 col-sm-6 day-card\"&gt;\n  &lt;div class=\"card\"&gt;\n    &lt;a href=\"2025/day_08.qmd\"&gt;\n      &lt;img src=\"2025/day_08.png\" class=\"card-img-top\" alt=\"Day 08\"&gt;\n      &lt;div class=\"card-body\"&gt;\n        &lt;h5 class=\"card-title\"&gt;08. Histogram&lt;/h5&gt;\n      &lt;/div&gt;\n    &lt;/a&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"col-md-4 col-sm-6 day-card\"&gt;\n  &lt;div class=\"card\"&gt;\n    &lt;a href=\"2025/day_09.qmd\"&gt;\n      &lt;img src=\"2025/day_09.png\" class=\"card-img-top\" alt=\"Day 09\"&gt;\n      &lt;div class=\"card-body\"&gt;\n        &lt;h5 class=\"card-title\"&gt;09. Diverging&lt;/h5&gt;\n      &lt;/div&gt;\n    &lt;/a&gt;\n  &lt;/div&gt;\n&lt;/div&gt;"
  },
  {
    "objectID": "gallery.html#relationships",
    "href": "gallery.html#relationships",
    "title": "Gallery ✴ 2025",
    "section": "",
    "text": "&lt;div class=\"col-md-4 col-sm-6 day-card\"&gt;\n  &lt;div class=\"card\"&gt;\n    &lt;a href=\"2025/day_16.qmd\"&gt;\n      &lt;img src=\"2025/day_16.png\" class=\"card-img-top\" alt=\"Day 16\"&gt;\n      &lt;div class=\"card-body\"&gt;\n        &lt;h5 class=\"card-title\"&gt;16. Negative&lt;/h5&gt;\n      &lt;/div&gt;\n    &lt;/a&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"col-md-4 col-sm-6 day-card\"&gt;\n  &lt;div class=\"card\"&gt;\n    &lt;a href=\"2025/day_17.qmd\"&gt;\n      &lt;img src=\"2025/day_17.png\" class=\"card-img-top\" alt=\"Day 17\"&gt;\n      &lt;div class=\"card-body\"&gt;\n        &lt;h5 class=\"card-title\"&gt;17. Birds&lt;/h5&gt;\n      &lt;/div&gt;\n    &lt;/a&gt;\n  &lt;/div&gt;\n&lt;/div&gt;"
  },
  {
    "objectID": "gallery.html#timeseries",
    "href": "gallery.html#timeseries",
    "title": "Gallery ✴ 2025",
    "section": "",
    "text": "&lt;div class=\"col-md-4 col-sm-6 day-card\"&gt;\n  &lt;div class=\"card\"&gt;\n    &lt;a href=\"2025/day_19.qmd\"&gt;\n      &lt;img src=\"2025/day_19.png\" class=\"card-img-top\" alt=\"Day 19\"&gt;\n      &lt;div class=\"card-body\"&gt;\n        &lt;h5 class=\"card-title\"&gt;19. Smooth&lt;/h5&gt;\n      &lt;/div&gt;\n    &lt;/a&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"col-md-4 col-sm-6 day-card\"&gt;\n  &lt;div class=\"card\"&gt;\n    &lt;a href=\"2025/day_20.qmd\"&gt;\n      &lt;img src=\"2025/day_20.png\" class=\"card-img-top\" alt=\"Day 20\"&gt;\n      &lt;div class=\"card-body\"&gt;\n        &lt;h5 class=\"card-title\"&gt;20. Urbanization&lt;/h5&gt;\n      &lt;/div&gt;\n    &lt;/a&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"col-md-4 col-sm-6 day-card\"&gt;\n  &lt;div class=\"card\"&gt;\n    &lt;a href=\"2025/day_21.qmd\"&gt;\n      &lt;img src=\"2025/day_21.png\" class=\"card-img-top\" alt=\"Day 21\"&gt;\n      &lt;div class=\"card-body\"&gt;\n        &lt;h5 class=\"card-title\"&gt;21. Fossils&lt;/h5&gt;\n      &lt;/div&gt;\n    &lt;/a&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\n\n&lt;p&gt;Made with Quarto and GitHub Copilot&lt;/p&gt;\n&lt;p class=\"author\"&gt;on a Framework Laptop 13 running Fedora KDE 42 and Zed&lt;/p&gt;"
  },
  {
    "objectID": "2025/day_01.html#overview",
    "href": "2025/day_01.html#overview",
    "title": "Day 01 - Fractions",
    "section": "",
    "text": "This visualization shows France’s energy mix evolution from 1960 to 2020, using waffle charts where each square represents 1% of total energy consumption for each decade.\n\n\nCode\nlibrary(rio)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(forcats)\nlibrary(waffle)\nlibrary(ggtext)\nlibrary(patchwork)\n\n# import \ndat &lt;- import(\"https://nyc3.digitaloceanspaces.com/owid-public/data/energy/owid-energy-data.csv\")\nsetDT(dat)\n\n# function to round down to the nearest decade\nround_to_decade &lt;- function(year) {\n  return(year - year %% 10)\n}\n\n# sum consumption for france by source, every 10 years from 1900 to 2020\ndat_sum &lt;- dat[year &gt;= 190 & year &lt;= 2020 & country == \"France\", \n  lapply(.SD, function(x) sum(x, na.rm = TRUE)), \n  .SDcols = c(\"biofuel_consumption\", \"coal_consumption\", \"gas_consumption\", \n              \"hydro_consumption\", \"nuclear_consumption\", \"oil_consumption\", \n              \"other_renewable_consumption\", \"solar_consumption\", \"wind_consumption\"),\n  by = .(country, decade = round_to_decade(year))]\n\n# pivot longer\ndat_sum &lt;- melt(dat_sum, id.vars = c(\"country\", \"decade\"))\n\n# consumption per year as perc of total\ndat_sum[, perc := (value / sum(value)) * 100, by = .(country, decade)]\n# remove NA\ndat_sum &lt;- na.omit(dat_sum, cols = \"perc\")\n\n# ensure sum=100 for each decade\ndat_sum[, perc_int := as.integer(round(perc))][,\n  perc_int := {\n    current_sum &lt;- sum(perc_int)\n    if (current_sum != 100) {\n      diff &lt;- 100 - current_sum\n      perc_int[which.max(value)] &lt;- perc_int[which.max(value)] + diff\n    }\n    perc_int\n  }, by = decade][\n  perc_int &gt; 0\n]\n\n\n    country decade                    variable     value       perc perc_int\n     &lt;char&gt;  &lt;num&gt;                      &lt;fctr&gt;     &lt;num&gt;      &lt;num&gt;    &lt;int&gt;\n 1:  France   2010         biofuel_consumption   312.373  1.1008956        1\n 2:  France   2020         biofuel_consumption    30.800  1.2616927        1\n 3:  France   1960            coal_consumption  2384.688 32.1562993       32\n 4:  France   1970            coal_consumption  3588.286 17.0100869       17\n 5:  France   1980            coal_consumption  2907.669 12.1153319       12\n 6:  France   1990            coal_consumption  1938.677  6.6809355        7\n 7:  France   2000            coal_consumption  1535.992  4.9443499        5\n 8:  France   2010            coal_consumption  1143.226  4.0290694        4\n 9:  France   2020            coal_consumption    55.982  2.2932493        2\n10:  France   1960             gas_consumption   319.189  4.3041006        4\n11:  France   1970             gas_consumption  1709.201  8.1023802        8\n12:  France   1980             gas_consumption  2718.534 11.3272665       11\n13:  France   1990             gas_consumption  3500.474 12.0630930       12\n14:  France   2000             gas_consumption  4509.500 14.5160559       15\n15:  France   2010             gas_consumption  4366.272 15.3880448       15\n16:  France   2020             gas_consumption   405.828 16.6243576       17\n17:  France   1960           hydro_consumption   732.836  9.8819190       10\n18:  France   1970           hydro_consumption  1709.349  8.1030818        8\n19:  France   1980           hydro_consumption  1967.835  8.1993426        8\n20:  France   1990           hydro_consumption  1956.481  6.7422904        7\n21:  France   2000           hydro_consumption  1741.802  5.6068511        6\n22:  France   2010           hydro_consumption  1576.686  5.5567117        6\n23:  France   2020           hydro_consumption   162.052  6.6383059        7\n24:  France   1970         nuclear_consumption   514.926  2.4409805        2\n25:  France   1980         nuclear_consumption  5488.373 22.8683047       23\n26:  France   1990         nuclear_consumption 10397.570 35.8313914       36\n27:  France   2000         nuclear_consumption 12001.427 38.6325280       39\n28:  France   2010         nuclear_consumption 10915.617 38.4698900       38\n29:  France   2020         nuclear_consumption   891.721 36.5285018       37\n30:  France   1960             oil_consumption  3938.314 53.1061521       54\n31:  France   1970             oil_consumption 13527.222 64.1251065       65\n32:  France   1980             oil_consumption 10865.302 45.2722577       46\n33:  France   1990             oil_consumption 11135.164 38.3732372       38\n34:  France   2000             oil_consumption 10987.829 35.3697616       35\n35:  France   2010             oil_consumption  9127.721 32.1688112       32\n36:  France   2020             oil_consumption   728.389 29.8377619       30\n37:  France   2010 other_renewable_consumption   221.419  0.7803466        1\n38:  France   2020 other_renewable_consumption    28.128  1.1522367        1\n39:  France   2010           solar_consumption   171.060  0.6028665        1\n40:  France   2020           solar_consumption    33.396  1.3680353        1\n41:  France   2010            wind_consumption   540.069  1.9033642        2\n42:  France   2020            wind_consumption   104.869  4.2958587        4\n    country decade                    variable     value       perc perc_int\n\n\nCode\n# legend of energy\nenergy_sources &lt;- c(\n  \"Coal\" = \"coal_consumption\",\n  \"Oil\" = \"oil_consumption\",\n  \"Gas\" = \"gas_consumption\",\n  \"Hydro\" = \"hydro_consumption\",\n  \"Nuclear\" = \"nuclear_consumption\",\n  \"Biofuel\" = \"biofuel_consumption\",\n  \"Solar\" = \"solar_consumption\",\n  \"Wind\" = \"wind_consumption\",\n  \"Other Renewables\" = \"other_renewable_consumption\"\n)\nenergy_colors = c(\n  \"Coal\" = \"#444239FF\", # very dark coal grey\n  \"Oil\" = \"#035F72FF\",\n  \"Gas\" = \"#D77186FF\",\n  \"Hydro\" = \"#A4B7E1FF\",\n  \"Nuclear\" = \"#E69F00\",\n  \"Biofuel\" = \"#B0986CFF\",\n  \"Solar\" = \"#F8D564FF\",\n  \"Wind\" = \"#56B4E9\",\n  \"Other Renewables\" = \"#1BB6AFFF\"\n)\nsubtitle_text &lt;- glue::glue(\n  \"In the 1960s, only &lt;span style='color:{energy_colors['Coal']};'&gt;&lt;strong&gt;coal&lt;/strong&gt;&lt;/span&gt;, \n    &lt;span style='color:{energy_colors['Oil']};'&gt;&lt;strong&gt;oil&lt;/strong&gt;&lt;/span&gt;, \n    &lt;span style='color:{energy_colors['Gas']};'&gt;&lt;strong&gt;gas&lt;/strong&gt;&lt;/span&gt;, and \n    &lt;span style='color:{energy_colors['Hydro']};'&gt;&lt;strong&gt;hydro&lt;/strong&gt;&lt;/span&gt; were part of the French energetic mix. By the 2020s, &lt;span style='color:{energy_colors['Nuclear']};'&gt;&lt;strong&gt;nuclear&lt;/strong&gt;&lt;/span&gt; energy grew to account for almost 40%, and other sources appeared such as \n    &lt;span style='color:{energy_colors['Biofuel']};'&gt;&lt;strong&gt;biofuel&lt;/strong&gt;&lt;/span&gt;, \n    &lt;span style='color:{energy_colors['Solar']};'&gt;&lt;strong&gt;solar&lt;/strong&gt;&lt;/span&gt;, \n    &lt;span style='color:{energy_colors['Wind']};'&gt;&lt;strong&gt;wind&lt;/strong&gt;&lt;/span&gt;, and \n    &lt;span style='color:{energy_colors['Other Renewables']};'&gt;&lt;strong&gt;other renewable energy&lt;/strong&gt;&lt;/span&gt;. While proportions help illustrate the balance between different energy sources, they can be misleading, as they hide the significant overall increase in the consumption of all energy sources.\"\n)\n# add levels and order by energy_sources\ndat_sum &lt;- dat_sum[,\n  variable := factor(\n    fct_recode(variable, !!!energy_sources),\n    levels = names(energy_sources)\n  )\n]\nsetorder(dat_sum, decade, variable)\n\n\n# plot\nbody_font &lt;- \"Carlito\"\ntitle_font&lt;- \"Carlito\"\ng &lt;- ggplot(dat_sum, aes(fill = variable, values = perc_int)) +\n  geom_waffle(\n    color = \"white\", \n    size = 0.2, \n    n_rows = 5, \n    flip = TRUE,\n    make_proportional = FALSE\n  ) +\n  facet_wrap(~decade, nrow = 1, strip.position = \"bottom\") +\n  theme_minimal() + \n  labs(\n    title = \"France's Energy Mix Evolution (1960-2020)\",\n    subtitle = subtitle_text,\n    caption = \"Each square represents 1% of total energy consumption for each decade from 1960 to 2020. These are proportions of total terawatt hours (TWh) consumed.&lt;br&gt;Data: Our World in Data | Heavily inspired by Muhammad Azhar's waffle plot on R Graph Gallery | Plot: @gnoblet\"\n  ) +\n  scale_x_discrete() + \n  scale_y_continuous(\n    labels = function(x) x * 5,\n    expand = c(0,0)) + \n  scale_fill_manual(\n        values = energy_colors,\n        breaks = names(energy_sources),  # Explicit legend order\n        name = \"Energy Source\",\n        drop = FALSE\n      ) +\n  theme(\n    # Grid\n    panel.grid = element_blank(),\n    # Axes\n    axis.title = element_blank(),\n    axis.text.x = element_text(family = body_font, size = 12),\n    # Strip\n    strip.text = element_text(family = body_font, size = 11),\n    # Legend\n    legend.position = \"none\",\n    # Title\n    plot.title = element_textbox_simple(\n      hjust = 0,\n      margin = margin(20, 0, 10, 0),\n      size = 20,\n      family = title_font,\n      face = \"bold\",\n      color = \"grey15\",\n      width = unit(0.9, \"npc\")\n    ),\n    # Subtitle\n    plot.subtitle = element_textbox_simple(\n      hjust = 0,\n      margin = margin(10, 0, 40, 0),\n      width = unit(0.9, \"npc\"),\n      size = 14,\n      family = body_font,\n      color = \"grey15\"),\n    # Caption\n    plot.caption = element_textbox_simple(\n      family = body_font,\n      face =\"plain\",\n      size = 11, \n      color = \"grey40\",\n      hjust = 0,\n      width =unit(0.95, \"npc\"),\n      margin = margin(10,0,0,0)\n    ),\n    # Background / esp for vector image\n    plot.background = element_rect(color = \"white\", fill = \"white\"),\n    plot.margin = margin(20, 20, 20, 20)\n  ) +\n  # Add arrow\n  geom_curve(\n    data = data.frame(x = 3.9, y = 21, xend = 4.9, yend = 24, decade = \"1970\"),\n    aes(x = x, y = y, xend = xend, yend = yend),\n    arrow = arrow(length = unit(0.03, \"npc\")),\n    curvature = -0.3,\n    color = \"black\",\n    inherit.aes = FALSE\n  )\n\ng &lt;- g + inset_element(\n  ggplot() +\n    geom_richtext(\n      aes(\n        x = 0.30,\n        y = 0.52,\n        label = \"&lt;span style='font-family:Carlito; font-size:15px;'&gt;In 1973, nuclear power was 8% of&lt;br&gt;the production of French electricity.&lt;/span&gt;\"\n      ),\n      fill = NA,\n      label.color = NA,\n      vjust = 0,\n      hjust = 0,\n      family = \"Carlito\"\n      ) +\n      theme_void() +\n      coord_cartesian(xlim = c(0, 1), ylim = c(0, 1), expand = FALSE),\n    left = 0, right = 1, bottom = 0, top = 1, align_to = 'full'\n)\n\n# save fig\nggsave(\n\"day_01.png\",\nheight = 6,\nwidth = 9,\ndpi = 600,\ntype = \"cairo-png\"\n)"
  },
  {
    "objectID": "2025/day_01.html#notes",
    "href": "2025/day_01.html#notes",
    "title": "Day 01 - Fractions",
    "section": "",
    "text": "This visualization uses data from Our World in Data to show how France’s energy sources have changed over six decades. The most notable change is the significant growth of nuclear energy in the energy mix, appearing in the 1970s and growing to account for almost 40% by the 2020s. The waffle chart format allows for easy comparison between decades, with each square representing 1% of total energy consumption.\nData source: Our World in Data - Energy\nTools: R (ggplot2, waffle, patchwork, data.table)"
  },
  {
    "objectID": "2025/day_08.html",
    "href": "2025/day_08.html",
    "title": "day_08 - 30DayChartChallenge",
    "section": "",
    "text": "This document contains the R code for creating the plot for this day’s challenge.\n\n\nCode\nlibrary(ggplot2)\nlibrary(HistData)\nlibrary(dplyr)\nlibrary(extrafont)\nlibrary(cranlogs)\n\npackage_name &lt;- \"HistData\"\ndownloads &lt;- cran_downloads(package_name, from = \"2021-01-01\", to = Sys.Date())\nQ1 &lt;- quantile(downloads$count, 0.25)\nQ3 &lt;- quantile(downloads$count, 0.75)\nIQR &lt;- Q3 - Q1\nlower_bound &lt;- Q1 - 1.5 * IQR\nupper_bound &lt;- Q3 + 1.5 * IQR\ndownloads &lt;- downloads |&gt; \n  dplyr::filter(count &gt;= lower_bound & count &lt;= upper_bound)\n\nggplot(downloads, aes(count)) +\n  geom_histogram(aes(y = after_stat(density)),binwidth = 10, color = \"#F5F5DC\", fill = \"#D4AF37\") +\n  geom_density(color = \"#8B4513\") +\n  scale_y_continuous(\n    name = \"Density\",\n    sec.axis = sec_axis(\n      trans = ~ . * nrow(downloads) * 10, \n      name = \"Counts\"\n    )\n  ) +\n  labs(\n    title = \"A True Hist-ogram\",\n    subtitle = \"Weekly downloads of HistData Package from CRAN\",\n    x = NULL,\n    y = NULL,\n    caption = \"1.5 IQR Outliers removed | Data: CRAN | Plot: @gnoblet\"\n  ) +\n  #scales_x_\n  theme_minimal() +\n  theme(\n    plot.background = element_rect(fill = \"#F5F5DC\"),\n    panel.grid.major = element_blank(),\n    panel.background = element_rect(fill = \"#F5F5DC\"), \n    panel.border = element_rect(color = \"#8B4513\", linewidth = 2, fill = NA),\n    plot.title = element_text(hjust = 0.5, family = \"Old English Text MT\", size = 24, color = \"#8B4513\"),\n    plot.subtitle = element_text(hjust = 0.5, family = \"Old English Text MT\", size = 18, color = \"#8B4513\"),\n    axis.title.x = element_text(family = \"Old English Text MT\", size = 16, color = \"#8B4513\"),\n    axis.title.y = element_text(family = \"Old English Text MT\", size = 16, color = \"#8B4513\"),\n    axis.text = element_text(family = \"Old English Text MT\", size=14, color = \"#8B4513\"),\n    plot.caption = element_text(family = \"Old English Text MT\", size = 10, color = \"#8B4513\")\n)\n\n\n\n\n\n\n\n\n\nCode\n# Save\nggsave(\"day_08.png\", width = 8, height = 6, dpi = 300)\n\n\n\n\n\n\n\nday_08 plot"
  },
  {
    "objectID": "2025/day_08.html#final-plot",
    "href": "2025/day_08.html#final-plot",
    "title": "day_08 - 30DayChartChallenge",
    "section": "",
    "text": "day_08 plot"
  }
]